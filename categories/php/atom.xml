<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/php/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2014-08-03T22:23:46+02:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Collection interface and Database abstraction]]></title>
    <link href="http://mnapoli.fr/collection-interface-and-database-abstraction/"/>
    <updated>2014-03-27T18:00:00+01:00</updated>
    <id>http://mnapoli.fr/collection-interface-and-database-abstraction</id>
    <content type="html"><![CDATA[<p>This article logically follows the previous: <a href="/repository-interface/">The Repository interface</a>. In there I suggested a better interface for repositories based on a Collection interface so that repositories could be manipulated like collections.</p>

<p>This article goes further in that idea and presents an API to abstract database access behind collections of objects.</p>

<p>But first let&rsquo;s start with Doctrine Criterias.</p>

<!-- more -->


<h2>What are Doctrine Criterias?</h2>

<p>When you use Doctrine, you end up interacting with list of objects in two ways:</p>

<ul>
<li>through repositories or the entity manager</li>
<li>through associations</li>
</ul>


<p>At the entity manager or repository level, you can write <strong>DQL queries</strong> (or use the query builder that will generate them for you). This is the most powerful API Doctrine provides to interact with the database.</p>

<p>But inside objects you don&rsquo;t have access to the entity manager or the repository, because the model shouldn&rsquo;t know about the persistence. So what do you do when you want to <strong>filter an association without loading all the objects?</strong> And furthermore: what do you do <strong>if the association is already loaded in memory?</strong> That would be stupid to issue a DB query when you could just filter the objects in memory.</p>

<p>That&rsquo;s where Doctrine introduced the concept of <strong>Criteria</strong>. It&rsquo;s an API that allows you to filter an association with an abstract &ldquo;query&rdquo; (≠ DB query) that you apply to a collection. What&rsquo;s good is:</p>

<ul>
<li>if the collection is already loaded, the filtering happens in memory with PHP</li>
<li>if the collection is not loaded, the filtering is done in a DB query</li>
</ul>


<blockquote><p>The Criteria has a limited matching language that works both on the SQL and on the PHP collection level.
This means you can use collection matching interchangeably, independent of in-memory or sql-backed collections.</p></blockquote>

<p>That&rsquo;s awesome!</p>

<p>Example of how to use it:</p>

<p>```php
$criteria = Criteria::create()</p>

<pre><code>-&gt;where(Criteria::expr()-&gt;eq('birthday', '1982-02-17'))
-&gt;orderBy(array('username' =&gt; Criteria::ASC))
-&gt;setFirstResult(0)
-&gt;setMaxResults(20);
</code></pre>

<p>$birthdayUsers = $userCollection->matching($criteria);
```</p>

<p>The Criteria API is obviously much more limited than DQL, but <strong>it&rsquo;s completely decoupled from persistence</strong>: you can use it in your model without polluting it with persistence problems, and you can use it against collections, loaded or not.</p>

<p>And the greatest thing of all: Doctrine developers didn&rsquo;t stop here, they also made the Repositories be compatible with those Criterias. Which means the same API whether it&rsquo;s a repository or not. If you read my previous article, you know how much I like that.</p>

<h2>What&rsquo;s wrong then?</h2>

<p>Well something has to be wrong else I wouldn&rsquo;t be writing this, and you wouldn&rsquo;t be wasting your time reading it.</p>

<ul>
<li>you cannot filter on associations of objects inside the collection, i.e. <code>JOIN</code> (which is pretty common)</li>
<li>you cannot perform updates or deletes in bulk without loading the objects first (like set <code>published = true</code> for all articles in this collection or repository)</li>
<li>the API uses persistence words, like &ldquo;where&rdquo;, &ldquo;order by"… It&rsquo;s not so much a biggy but still, it&rsquo;s not perfect</li>
<li>you cannot chain criterias and have only 1 DB query: 1 Criteria = 1 query</li>
</ul>


<p>The last point is a bit vague so let me show you an example:</p>

<p>```php
class Blog
{</p>

<pre><code>public function getPublishedArticles()
{
    $criteria = Criteria::create()
        -&gt;where(Criteria::expr()-&gt;eq('published', true));
    return $this-&gt;articles-&gt;matching($criteria);
}
</code></pre>

<p>}</p>

<p>$articles = blog->getPublishedArticles();</p>

<p>$criteria = Criteria::create()</p>

<pre><code>-&gt;setFirstResult(0)
-&gt;setMaxResults(20);
</code></pre>

<p>$articlesToDisplay = $articles->matching($criteria);
```</p>

<p>Here all the published articles will be loaded in memory, and then the first 20 results will be kept.</p>

<h2>The Collection interface</h2>

<p>Before diving in a better alternative to criterias, let&rsquo;s start back with an awesome Collection interface:</p>

<p>```php
interface Collection extends Countable, IteratorAggregate, ArrayAccess
{</p>

<pre><code>function add($element);

function get($key);

function contains($element);

function remove($element);

function clear();

function toArray();

function count();

function filter(Expr $predicate);

function sort($field, $direction = 'ASC');

function slice($offset, $length = null);

function map(Closure $function);
</code></pre>

<p>}
```</p>

<p>(let&rsquo;s also assume that the Repository interface also extends that interface :) )</p>

<h2>Filtering!</h2>

<p>This interface looks a lot like the Doctrine Collection interface, except that <code>filter</code> doesn&rsquo;t take a <code>Closure</code> anymore but an &ldquo;expression&rdquo;, which is where the fun begin. Because it&rsquo;s not PHP code but an expression object (like the Criteria expression object), we can apply the same filtering in memory and in database.</p>

<p>Now we are get out of the scope of the interface and have a look at the implementations: <strong>what if <code>filter</code>, <code>sort</code> and <code>slice</code> where lazy?</strong></p>

<p>What I mean is these methods would return a new &ldquo;lazy&rdquo; collection that would only be loaded/computed if used. That allows some pretty nice chaining!</p>

<p>Example:</p>

<p>```php
$results = $articles->filter(Expr::eq(&lsquo;title&rsquo;, &lsquo;Hello&rsquo;))</p>

<pre><code>    -&gt;filter(Expr::eq('author', $john))
    -&gt;sort('date', 'DESC');
</code></pre>

<p>// Perform a COUNT() query in database
echo count($results) . &lsquo; results&rsquo;;</p>

<p>// Fetches only 10 results from the database
$pageResults = $results->slice(0, 10);</p>

<p>// Executes on loaded objects, no DB query here
$allAuthors = $pageResults->map(function (Article $article) {</p>

<pre><code>return $article-&gt;getAuthor();
</code></pre>

<p>});
```</p>

<p>This code would only issue 2 queries:</p>

<p>```sql
&mdash; Count the total number of articles
SELECT COUNT(art.id) FROM Article art
INNER JOIN User ON User.id = art.author_id
WHERE art.title = &lsquo;Hello&rsquo;
ORDER BY art.date DESC</p>

<p>&mdash; Fetch 10 articles for the current page
SELECT &hellip; FROM Article art
INNER JOIN User ON User.id = art.author_id
WHERE art.title = &lsquo;Hello&rsquo;
ORDER BY art.date DESC
LIMIT 0, 10
```</p>

<h2>What about updating and deleting?</h2>

<p>In the same spirit, you could imagine an API to update or delete items from a collection or repository:</p>

<p>```php
// Delete Bob&rsquo;s articles
$articles = $articles->filter(Expr::eq(&lsquo;author&rsquo;, $bob));
$articles->clear();</p>

<p>// Publish Alice&rsquo;s articles
$articles = $articles->filter(Expr::eq(&lsquo;author&rsquo;, $alice));
$articles->apply(Expr::set(&lsquo;published&rsquo;, true));
```</p>

<p>Here the delete and update queries will include the previous filtering, such that there is only 1 query executed for Bob, and 1 for Alice.</p>

<p>Of course, that is if the objects are not loaded in memory. If they are, then the objects are updated.</p>

<h2>Conclusion</h2>

<p>This article was just an idea thrown around for discussion. There is no library available, or repository containing any code.</p>

<p>To sum up all this quickly:</p>

<ul>
<li>a repository is a collection (and much more too)</li>
<li>you can manipulate collections and chain filtering, sorting, etc&hellip; in a very readable way while knowing you don&rsquo;t trigger dozens of DB queries</li>
<li>the API shown here could be a more powerful alternative to Criterias</li>
<li>it can also provide a simpler alternative to DQL/Query Builder with the benefit of being persistence agnostic and usable in entities</li>
<li>it could allow pagination and sorting in the controllers much more easily (you wouldn&rsquo;t need to add these as parameters in your repositories for example)</li>
<li>it would allow for more optimized database access (counting the collection would just issue a COUNT query for example)</li>
</ul>


<h3>Drawbacks</h3>

<p>I can&rsquo;t finish that article without expressing what I consider as the major drawback behind all this:
you are a little tiny bit persistent-aware, because you don&rsquo;t filter your collections with PHP code but with
an arbitrary expression language.</p>

<p>That doesn&rsquo;t mean your code is coupled to the persistence layer though because it also completely works in memory,
but you deliberately don&rsquo;t use PHP code because you <em>know</em> that it&rsquo;s not optimized to load all the objects from the
database and then filter them with PHP.</p>

<p>I would say <strong>that&rsquo;s an acceptable compromise</strong>, because let&rsquo;s be honest, there is no perfect solution.
<strong>You can&rsquo;t apply PHP code to a SQL database</strong> so you have to compromise somewhere…</p>

<h3>Penumbra</h3>

<p>Or can you? ;)</p>

<p>That&rsquo;s the bonus note on which I will finish.
There is another approach (rather controversial) taken by a new project named <strong><a href="https://github.com/TimeToogo/Penumbra">Penumbra</a></strong>.
Instead of playing with &ldquo;expressions&rdquo; to filter collections, it allows to filter using PHP code! It then parses that code
to turn it into SQL code. Pretty audacious, but apparently it works (if you keep it reasonable) :)</p>

<p>Example:</p>

<p>```php
$MiddleAgedUsersRequest = $UserRepository->Request()</p>

<pre><code>    -&gt;Where(function (User $User) {
        return $User-&gt;GetAge() &gt; 20 &amp;&amp; $User-&gt;GetAge() &lt; 50 ;
    })
    -&gt;OrderByDescending(function (User $User) { return $User-&gt;GetLastLoginDate(); });
</code></pre>

<p>$SomeActiveMiddleAgedUsers = $MiddleAgedUsersRequest->AsArray();
```</p>

<p>Will result in:</p>

<p><code>sql
SELECT Users.* FROM Users
WHERE Users.Age &gt; 20 AND Users.Age &lt; 50
ORDER BY Users.LastLoginDate DESC;
</code></p>

<p>I will not comment on whether this is good or not, because honestly I don&rsquo;t know.
It seems like it&rsquo;s heavily tested and it&rsquo;s a serious project, so it&rsquo;s not just a POC or hack.
I&rsquo;ll let you make your own mind :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Repository interface]]></title>
    <link href="http://mnapoli.fr/repository-interface/"/>
    <updated>2014-03-10T18:00:00+01:00</updated>
    <id>http://mnapoli.fr/repository-interface</id>
    <content type="html"><![CDATA[<p>Here is the definition of a repository for Eric Evans in his
<a href="http://books.google.fr/books/about/Domain_driven_Design.html?id=7dlaMs0SECsC&amp;redir_esc=y">Domain Driven Design</a> book:</p>

<blockquote><p>A <em>repository</em> represents all objects of a certain type as a conceptual set (usually emulated).
<strong>It acts like a collection</strong>, except with more elaborate querying capability.
[&hellip;]
For each type of object that needs global access, <strong>create an object that can provide the illusion
of an in-memory collection</strong> of all objects of that type.</p></blockquote>

<p>While I love Doctrine, I really dislike
<a href="https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Persistence/ObjectRepository.php">their repository interface</a>
because it doesn&rsquo;t look and act like a collection.
And that&rsquo;s too bad because Doctrine even provides a very good abstraction for collections
through the <code>doctrine/collection</code> project. It even supports filtering with criterias over collections <strong>and</strong> repositories.</p>

<p>I know that Doctrine is not targeted at Domain Driven Design only, but I think having a better repository interface
would still benefit the project and the users.</p>

<p>Here is a basic repository interface I tend to use instead:</p>

<p>```php
interface Repository
{</p>

<pre><code>function add($entity);

function remove($entity);

function count();

/**
 * @throws NotFoundException
 * @return object
 */
function get($id);

/**
 * @return array
 */
function find(Criteria $criteria);

function toArray();
</code></pre>

<p>}
```</p>

<!-- more -->


<p>Of course, you should use this interface as a base and write your own repository interfaces for each aggregate root.</p>

<h2>Collection verbs</h2>

<p>Why use verbs like<code>add</code> and <code>remove</code> instead of <code>load</code>, <code>save</code>, <code>delete</code>, <code>persist</code>, …?</p>

<p>Because those are persistence-related terms and have nothing to do in an interface
that is going to be used/extended in the domain layer.</p>

<h2>Get versus Find</h2>

<p>I really dislike that you can only <code>find</code> in Doctrine: it will return null if no entity is found.</p>

<p>Most of the time, that is not what you want. You actually don&rsquo;t want to &ldquo;search and find&rdquo; the entity,
you just want to get it by its id and you assume it exists.</p>

<p>That&rsquo;s why you need to clearly differentiate between find and get:</p>

<ul>
<li>method starting with <code>get</code> should always return an entity, or throw an exception if not found</li>
<li>method starting with <code>find</code> should always return a collection (that could be empty)</li>
</ul>


<h2>Going further: the collection interface</h2>

<p>I&rsquo;ve said it already, but a repository should behave like a collection.
The interface shown above is not completely satisfying yet because it doesn&rsquo;t totally behave like a collection.
For example you can&rsquo;t iterate it.</p>

<p>So the best solution is simple: <strong>write a sensible collection interface and have the repository extend it</strong>.</p>

<p>```php
interface Collection extends Countable, IteratorAggregate, ArrayAccess
{</p>

<pre><code>function add($element);

function remove($element);

function clear();

function contains($element);

function get($key);

function find(Criteria $criteria);

function toArray();

function slice($offset, $length = null);
</code></pre>

<p>}</p>

<p>interface Repository extends Collection
{
}
```</p>

<p>(this is a very simple version, not exhaustive at all)</p>

<p>Now this is much better.
<strong>You can even type-hint against the collection and accept at the same time collections and repositories!</strong></p>

<p>You can then iterate or filter the collection without having to care what the object really is.
For example, you can write a <code>ProductCriteria</code> and use it both on the repository and collections of products.</p>

<p>Example: let&rsquo;s say you write a controller to display a product list:</p>

<p>```php
class ProductListController
{</p>

<pre><code>/**
 * @var ProductCollection
 */
private $products;

public function __construct(ProductCollection $products)
{
    $this-&gt;products = $products;
}

public function listAction()
{
    return new View('product-list.twig.html', [$this-&gt;products]);
}
</code></pre>

<p>}
```</p>

<p>Here your controller is completely reusable. If you give it the <code>ProductRepository</code>, it can display the whole
product list. If you give it the list of favorite products of the user, it will work too.
Thank you dependency injection!</p>

<p>And the day PHP gets generics, that will be even nicer (<code>Collection&lt;Product&gt;</code>) but that&rsquo;s a debate for another day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with mails in dev environment]]></title>
    <link href="http://mnapoli.fr/working-with-mails-in-dev-environment/"/>
    <updated>2013-09-23T16:32:00+02:00</updated>
    <id>http://mnapoli.fr/working-with-mails-in-dev-environment</id>
    <content type="html"><![CDATA[<p>If your application sends emails, you probably don&rsquo;t want emails to be sent when you are developing on your machine.</p>

<p>If you use nice libraries like <a href="http://swiftmailer.org/">SwiftMailer</a>, it is easy to use a mock instead of sending real emails.
But if you don&rsquo;t, you can act on PHP&rsquo;s configuration: instead of installing and using a real SMTP server on your machine, you can fake one using a simple script.</p>

<!--more-->


<p>The fake server will be a shell script: create it as <code>/usr/local/bin/sendmail-fake</code>:</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>{
date
echo $@
cat
} >> /var/log/sendmail-fake.log
```</p>

<p>Set up file permissions and check that it works:</p>

<p><code>sh
$ sudo chmod +x /usr/local/bin/sendmail-fake
$ sudo chmod 777 /var/log/sendmail-fake.log
$ /usr/local/bin/sendmail-fake
</code></p>

<p>Now configure PHP to use it in the <code>php.ini</code>:</p>

<p><code>ini
sendmail_path = /usr/local/bin/sendmail-fake
</code></p>

<p>(and restart Apache)</p>

<p><strong>That&rsquo;s it!</strong></p>

<p>You can also see the emails content in <code>/var/log/sendmail-fake.log</code>.</p>

<p>You could even go further and edit the script to open the content of the mail into a text editor, or a browser. But that would be OS dependent, so I kept with the log file here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MetaModel and MetaConsole to debug your application]]></title>
    <link href="http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application/"/>
    <updated>2013-09-13T16:08:00+02:00</updated>
    <id>http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application</id>
    <content type="html"><![CDATA[<p>I started working a few months ago on <a href="https://github.com/mnapoli/MetaModel">MetaModel</a>, a language that enables to <strong>traverse and operate your PHP model</strong>.</p>

<p>Today I&rsquo;m going to show you how you can use MetaModel through the <a href="https://github.com/mnapoli/MetaConsole">MetaConsole</a> to debug your application.</p>

<p><img src="/images/posts/metaconsole3.gif"></p>

<!-- more -->


<h2>Setup</h2>

<p>To integrate the MetaConsole to your project, it&rsquo;s very simple using Composer:</p>

<p>```json
{</p>

<pre><code>"require-dev": {
    "mnapoli/metaconsole": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>Now I create a <code>bin/meta.php</code> file (name it as you like) in my application:</p>

<p>```php</p>

<h1>!/usr/bin/env php</h1>

<p>&lt;?php
use MetaModel\Bridge\Doctrine\EntityManagerBridge;
use MetaModel\Bridge\PHPDI\PHPDIBridge;
use MetaModel\MetaModel;</p>

<p>// Here I set up my application (bootstrap)
require_once <strong>DIR</strong> . &lsquo;/../application/init.php&rsquo;;</p>

<p>$metaModel = new MetaModel();</p>

<p>// Integrate with the Doctrine EntityManager
$entityManager = /<em> &hellip; </em>/;
$metaModel->addObjectManager(new EntityManagerBridge($entityManager));</p>

<p>// Integrate with PHP-DI container
$container = /<em> &hellip; </em>/;
$metaModel->addContainer(new PHPDIBridge($container));</p>

<p>$console = new MetaConsole\Application(&lsquo;MetaConsole&rsquo;, null, $metaModel);
$console->run();
```</p>

<p>As you can see, I can integrate the console with my ORM (<a href="http://www.doctrine-project.org/">Doctrine 2</a> here) and my DI container (<a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>). You can write bridges for other kinds of object managers or containers (and feel free to submit a Pull Request too).</p>

<h2>Using</h2>

<p>Last week, I had a bug in my application, and it was very difficult to debug because it involved data, and that was not the kind of bug you can reproduce and fix using unit tests because it involved a lot of objects. Without MetaConsole, I would have had to dig through the database using phpMyAdmin or MySQL Workbench, writing queries and joining dozens of tables.</p>

<p>Instead, I launched MetaConsole, and I selected an object for which I had an ID (the ID was in the URL of the webpage I wanted to debug):</p>

<p><code>
AF_Model_InputSet(562)
</code></p>

<p>This query will select the entity <code>AF_Model_InputSet</code> with ID 562, and dump it to the screen. To do this, MetaModel queries Doctrine, which roughly translate to this PHP code:</p>

<p><code>php
$entity = $entityManager-&gt;find('AF_Model_InputSet', 562);
</code></p>

<p>Now that I had my object on screen, I could <strong>traverse the object graph</strong> (through associations, getters, arrays, …) with more precise queries:</p>

<p><img src="/images/posts/metaconsole1.png"></p>

<p>In the end, I ended up finding my bug: one component was marked as &ldquo;required&rdquo; but had a number of required fields > 0 (not normal!). I fixed the code, and now I needed to rebuild some data to have everything in sync again (after my tests). That&rsquo;s the kind of operation that can&rsquo;t be done just on a single object through the website.</p>

<p>No problem, MetaModel let&rsquo;s you traverse an object graph, but also <strong>call methods on objects and on services:</strong></p>

<p><img src="/images/posts/metaconsole2.png"></p>

<h2>Conclusion</h2>

<p>MetaModel is pretty much stable, though there are a lot of features I want to add (arguments in method calls, …).</p>

<p>On the other side, MetaConsole is still in development, and I hope to provide better integration with frameworks and a more enjoyable interface. If you are interested, you can try it (it&rsquo;s a development tool, so there&rsquo;s no risk since you shouldn&rsquo;t use it in production), and you can <a href="https://github.com/mnapoli/MetaConsole">improve it</a>.</p>

<p>And also, ideas are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friend services?]]></title>
    <link href="http://mnapoli.fr/friend-services/"/>
    <updated>2013-08-09T17:03:00+02:00</updated>
    <id>http://mnapoli.fr/friend-services</id>
    <content type="html"><![CDATA[<p>Using the Domain Driven Design methodology, I sometimes end up on such a situation: a behavior in a model class is complex and involving other classes. It’s time to put that behavior in a service (or a factory if the situation applies to a constructor).</p>

<p>The problem is that in my service, I am not in the context of the domain class. If I move <code>Foo::something()</code> into <code>FooService::something($foo)</code>, then <strong>I can’t access private properties of Foo</strong>, thus limiting me to the public API of Foo.</p>

<p>Now I end up adding accessors, thus breaking encapsulation and complexifying everything where all I wanted was improving the code.</p>

<p>VB.Net has a concept of “Friend” visibility, i.e. if A is friend with B, then A can access private properties of B (or something like that it’s been a long time :p). PHP doesn’t have such a concept natively, but here is a tryout to apply it with workarounds.</p>

<!-- more -->


<p><em>Disclaimer</em>: the code is not pretty and is not for production. This is just an idea thrown around.</p>

<p>```php
&lt;?php
class Foo {</p>

<pre><code>private $bar = 'hello world';
</code></pre>

<p>}</p>

<p>class FriendOfFoo {</p>

<pre><code>public function doSomething($foo) {
    return function() use ($foo) {
        echo $foo-&gt;bar;
    };
}
</code></pre>

<p>}</p>

<p>$foo = new Foo();</p>

<p>$service = new FriendOfFoo();</p>

<p>$closure = $service->doSomething($foo)&ndash;>bindTo(null, $foo);</p>

<p>$closure();
```</p>

<p>See it in action on <a href="http://3v4l.org/e9RNO">3v4l.org</a>.</p>

<p>Here, FriendOfFoo is a service that has access to Foo’s private and protected properties.</p>

<p>We achieve that by writing the methods of the service into closures. We can then <a href="http://php.net/manual/en/closure.bindto.php">bind those closures to the context of Foo</a>, and voilà!</p>

<p>If you see a better way of achieving this, I am interested.</p>
]]></content>
  </entry>
  
</feed>
