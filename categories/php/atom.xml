<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/php/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2014-01-23T17:24:51+01:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with mails in dev environment]]></title>
    <link href="http://mnapoli.fr/working-with-mails-in-dev-environment/"/>
    <updated>2013-09-23T16:32:00+02:00</updated>
    <id>http://mnapoli.fr/working-with-mails-in-dev-environment</id>
    <content type="html"><![CDATA[<p>If your application sends emails, you probably don&rsquo;t want emails to be sent when you are developing on your machine.</p>

<p>If you use nice libraries like <a href="http://swiftmailer.org/">SwiftMailer</a>, it is easy to use a mock instead of sending real emails.
But if you don&rsquo;t, you can act on PHP&rsquo;s configuration: instead of installing and using a real SMTP server on your machine, you can fake one using a simple script.</p>

<!--more-->


<p>The fake server will be a shell script: create it as <code>/usr/local/bin/sendmail-fake</code>:</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<p>{
date
echo $@
cat
} >> /var/log/sendmail-fake.log
```</p>

<p>Set up file permissions and check that it works:</p>

<p><code>sh
$ sudo chmod +x /usr/local/bin/sendmail-fake
$ sudo chmod 777 /var/log/sendmail-fake.log
$ /usr/local/bin/sendmail-fake
</code></p>

<p>Now configure PHP to use it in the <code>php.ini</code>:</p>

<p><code>ini
sendmail_path = /usr/local/bin/sendmail-fake
</code></p>

<p>(and restart Apache)</p>

<p><strong>That&rsquo;s it!</strong></p>

<p>You can also see the emails content in <code>/var/log/sendmail-fake.log</code>.</p>

<p>You could even go further and edit the script to open the content of the mail into a text editor, or a browser. But that would be OS dependent, so I kept with the log file here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MetaModel and MetaConsole to debug your application]]></title>
    <link href="http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application/"/>
    <updated>2013-09-13T16:08:00+02:00</updated>
    <id>http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application</id>
    <content type="html"><![CDATA[<p>I started working a few months ago on <a href="https://github.com/mnapoli/MetaModel">MetaModel</a>, a language that enables to <strong>traverse and operate your PHP model</strong>.</p>

<p>Today I&rsquo;m going to show you how you can use MetaModel through the <a href="https://github.com/mnapoli/MetaConsole">MetaConsole</a> to debug your application.</p>

<p><img src="/images/posts/metaconsole3.gif"></p>

<!-- more -->


<h2>Setup</h2>

<p>To integrate the MetaConsole to your project, it&rsquo;s very simple using Composer:</p>

<p>```json
{</p>

<pre><code>"require-dev": {
    "mnapoli/metaconsole": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>Now I create a <code>bin/meta.php</code> file (name it as you like) in my application:</p>

<p>```php</p>

<h1>!/usr/bin/env php</h1>

<p>&lt;?php
use MetaModel\Bridge\Doctrine\EntityManagerBridge;
use MetaModel\Bridge\PHPDI\PHPDIBridge;
use MetaModel\MetaModel;</p>

<p>// Here I set up my application (bootstrap)
require_once <strong>DIR</strong> . &lsquo;/../application/init.php&rsquo;;</p>

<p>$metaModel = new MetaModel();</p>

<p>// Integrate with the Doctrine EntityManager
$entityManager = /<em> &hellip; </em>/;
$metaModel->addObjectManager(new EntityManagerBridge($entityManager));</p>

<p>// Integrate with PHP-DI container
$container = /<em> &hellip; </em>/;
$metaModel->addContainer(new PHPDIBridge($container));</p>

<p>$console = new MetaConsole\Application(&lsquo;MetaConsole&rsquo;, null, $metaModel);
$console->run();
```</p>

<p>As you can see, I can integrate the console with my ORM (<a href="http://www.doctrine-project.org/">Doctrine 2</a> here) and my DI container (<a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>). You can write bridges for other kinds of object managers or containers (and feel free to submit a Pull Request too).</p>

<h2>Using</h2>

<p>Last week, I had a bug in my application, and it was very difficult to debug because it involved data, and that was not the kind of bug you can reproduce and fix using unit tests because it involved a lot of objects. Without MetaConsole, I would have had to dig through the database using phpMyAdmin or MySQL Workbench, writing queries and joining dozens of tables.</p>

<p>Instead, I launched MetaConsole, and I selected an object for which I had an ID (the ID was in the URL of the webpage I wanted to debug):</p>

<p><code>
AF_Model_InputSet(562)
</code></p>

<p>This query will select the entity <code>AF_Model_InputSet</code> with ID 562, and dump it to the screen. To do this, MetaModel queries Doctrine, which roughly translate to this PHP code:</p>

<p><code>php
$entity = $entityManager-&gt;find('AF_Model_InputSet', 562);
</code></p>

<p>Now that I had my object on screen, I could <strong>traverse the object graph</strong> (through associations, getters, arrays, …) with more precise queries:</p>

<p><img src="/images/posts/metaconsole1.png"></p>

<p>In the end, I ended up finding my bug: one component was marked as &ldquo;required&rdquo; but had a number of required fields > 0 (not normal!). I fixed the code, and now I needed to rebuild some data to have everything in sync again (after my tests). That&rsquo;s the kind of operation that can&rsquo;t be done just on a single object through the website.</p>

<p>No problem, MetaModel let&rsquo;s you traverse an object graph, but also <strong>call methods on objects and on services:</strong></p>

<p><img src="/images/posts/metaconsole2.png"></p>

<h2>Conclusion</h2>

<p>MetaModel is pretty much stable, though there are a lot of features I want to add (arguments in method calls, …).</p>

<p>On the other side, MetaConsole is still in development, and I hope to provide better integration with frameworks and a more enjoyable interface. If you are interested, you can try it (it&rsquo;s a development tool, so there&rsquo;s no risk since you shouldn&rsquo;t use it in production), and you can <a href="https://github.com/mnapoli/MetaConsole">improve it</a>.</p>

<p>And also, ideas are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friend services?]]></title>
    <link href="http://mnapoli.fr/friend-services/"/>
    <updated>2013-08-09T17:03:00+02:00</updated>
    <id>http://mnapoli.fr/friend-services</id>
    <content type="html"><![CDATA[<p>Using the Domain Driven Design methodology, I sometimes end up on such a situation: a behavior in a model class is complex and involving other classes. It’s time to put that behavior in a service (or a factory if the situation applies to a constructor).</p>

<p>The problem is that in my service, I am not in the context of the domain class. If I move <code>Foo::something()</code> into <code>FooService::something($foo)</code>, then <strong>I can’t access private properties of Foo</strong>, thus limiting me to the public API of Foo.</p>

<p>Now I end up adding accessors, thus breaking encapsulation and complexifying everything where all I wanted was improving the code.</p>

<p>VB.Net has a concept of “Friend” visibility, i.e. if A is friend with B, then A can access private properties of B (or something like that it’s been a long time :p). PHP doesn’t have such a concept natively, but here is a tryout to apply it with workarounds.</p>

<!-- more -->


<p><em>Disclaimer</em>: the code is not pretty and is not for production. This is just an idea thrown around.</p>

<p>```php
&lt;?php
class Foo {</p>

<pre><code>private $bar = 'hello world';
</code></pre>

<p>}</p>

<p>class FriendOfFoo {</p>

<pre><code>public function doSomething($foo) {
    return function() use ($foo) {
        echo $foo-&gt;bar;
    };
}
</code></pre>

<p>}</p>

<p>$foo = new Foo();</p>

<p>$service = new FriendOfFoo();</p>

<p>$closure = $service->doSomething($foo)&ndash;>bindTo(null, $foo);</p>

<p>$closure();
```</p>

<p>See it in action on <a href="http://3v4l.org/e9RNO">3v4l.org</a>.</p>

<p>Here, FriendOfFoo is a service that has access to Foo’s private and protected properties.</p>

<p>We achieve that by writing the methods of the service into closures. We can then <a href="http://php.net/manual/en/closure.bindto.php">bind those closures to the context of Foo</a>, and voilà!</p>

<p>If you see a better way of achieving this, I am interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code coverage reports with GitHub, Travis and Coveralls]]></title>
    <link href="http://mnapoli.fr/code-coverage-reports-with-github-travis-and/"/>
    <updated>2013-06-08T20:00:00+02:00</updated>
    <id>http://mnapoli.fr/code-coverage-reports-with-github-travis-and</id>
    <content type="html"><![CDATA[<p>You have a PHP project hosted on GitHub with continuous integration using Travis-CI?</p>

<p>How about setting up <strong>code coverage reports</strong>?</p>

<p>For example, here is the code coverage report of <a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>: <a href="https://coveralls.io/r/mnapoli/PHP-DI?branch=master"><img src="https://coveralls.io/repos/mnapoli/PHP-DI/badge.png?branch=master" alt="Coverage Status" /></a> (click on the link to see the details).</p>

<!-- more -->


<p>To do so, you will need to create an account and enable your project at <a href="https://coveralls.io/">Coveralls</a>. Then add this to your <code>composer.json</code>:</p>

<p>```json
&ldquo;require-dev&rdquo;: {</p>

<pre><code>"satooshi/php-coveralls": "dev-master"
</code></pre>

<p>}
```</p>

<p>Finally, update your <code>.travis.yml</code> configuration:</p>

<p>```yaml
language: php</p>

<p>php:
 &ndash; 5.3
 &ndash; 5.4
 &ndash; 5.5</p>

<p>before_script:
 &ndash; wget <a href="http://getcomposer.org/composer.phar">http://getcomposer.org/composer.phar</a>
 &ndash; php composer.phar install &mdash;dev &mdash;no-interaction</p>

<p>script:
 &ndash; mkdir -p build/logs
 &ndash; phpunit &mdash;coverage-clover build/logs/clover.xml</p>

<p>after_script:
 &ndash; php vendor/bin/coveralls -v
```</p>

<p>Now if you commit and push, Travis will run the tests and push the code coverage results to Coverall. Check out your project page on Coverall!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The “Optional Singleton” pattern]]></title>
    <link href="http://mnapoli.fr/the-optional-singleton-pattern/"/>
    <updated>2013-03-22T20:00:00+01:00</updated>
    <id>http://mnapoli.fr/the-optional-singleton-pattern</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> is a practical design pattern, that’s the reason it is so popular amongst beginners. It is also an anti-pattern because of the problems it introduces (global state, difficult to test, …).</p>

<p>While I agree with that, and the fact that Singletons should be used with (a lot of) moderation, I also like an alternative pattern which comes with the advantage of the singleton and balances out its disadvantages. This can be useful if you have to work on a codebase that has singletons.</p>

<p>I’m calling this pattern the <strong>Optional Singleton</strong> for lack of a better name.</p>

<p>Simply put, this is a class which you can use as a singleton, or not (it’s optional ;):</p>

<ul>
<li>you can still use the handy <code>MySingleton::getInstance()</code></li>
<li>you can however create new instances of the class, for example for tests</li>
</ul>


<!-- more -->


<p>There is nothing revolutionary about it, see for yourself:</p>

<p><div><script src='https://gist.github.com/5221664.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Of course, this is a pattern that has to be used where it makes sense. Singletons, as cool as they can be, will never do better than dependency injection.</p>

<hr />

<p><strong>Update</strong>: I’ve received numerous responses (mostly “the singleton is an anti-pattern” which I agree to). Here is one of my response that I’d like to have here as well:</p>

<blockquote><p>The entire point of the singleton pattern is that you <strong>can’t</strong> instantiate the class. That’s why the pattern is called singleton.</p></blockquote>

<p>My answer:</p>

<blockquote><p>Yes, but in 90% of its derived usage it’s not because we want only one instance, it’s because it’s practical.</p>

<p>Quote from wikipedia: “There is criticism of the use of the singleton pattern, as some consider it an anti-pattern, judging that it is overused, <strong>introduces unnecessary restrictions in situations where a sole instance of a class is not actually required</strong>, and introduces global state into an application.”</p>

<p>For example one may use the singleton pattern for services: accessing them is practical, you can access them anywhere with the singleton pattern. I’ve seen codebases with this pattern.</p>

<p>Now if I come on a codebase using the singleton for services, and if I can’t rewrite everything, I’ll turn the Singletons into “Optional Singletons” so that the existing code still work, and so that I can use Dependency Injection over those services in the new code that I’ll write.</p></blockquote>
]]></content>
  </entry>
  
</feed>
