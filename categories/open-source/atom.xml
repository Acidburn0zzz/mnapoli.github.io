<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open-source | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/open-source/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2016-11-24T23:13:08+01:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test against the lowest Composer dependencies on Travis]]></title>
    <link href="http://mnapoli.fr/test-lowest-dependencies/"/>
    <updated>2014-12-17T18:00:00+01:00</updated>
    <id>http://mnapoli.fr/test-lowest-dependencies</id>
    <content type="html"><![CDATA[<p>Composer just got a <a href="https://github.com/composer/composer/pull/3450">new awesome addition</a> thanks to <a href="https://twitter.com/nicolasgrekas">Nicolas Grekas</a>: prefer the lowest versions of your dependencies.</p>

<p><code>
composer update --prefer-lowest
</code></p>

<p>This amazing option will install the lowest versions possible for all your dependencies.</p>

<p>What for? <strong>Tests</strong> of course!</p>

<!--more-->


<h2>Update Composer</h2>

<p>OK before we get started, don&rsquo;t forget to update Composer right now if you want to use the new option:</p>

<p><code>
sudo composer self-update
</code></p>

<h2>Testing against lowest dependencies</h2>

<p>It might not make a lot of sense to test an <strong>application</strong> against its lowest dependencies, because unless something is done wrong it will be installed with controlled versions.</p>

<p>However, for <strong>libraries</strong> (or <em>components</em>…) it&rsquo;s a very good thing.</p>

<p>To give you an example, I wanted to give it a try and ran <code>composer update --prefer-lowest</code> in <a href="http://php-di.org">PHP-DI</a>&rsquo;s directory: all hell broke loose… PHPUnit wouldn&rsquo;t even start.</p>

<p>The reason for this were multiples, but they all boiled down to:</p>

<ul>
<li>I used a feature that didn&rsquo;t yet exist in version X of dependency Y</li>
<li>or dependency Y had a bug in version X</li>
</ul>


<p><strong>and I allowed installing that problematic version X in <code>composer.json</code></strong>.</p>

<p>In the end, I was distributing a library that <em>could</em> not work at all (if people had insane version constraints).</p>

<h2>Setting up tests on Travis</h2>

<p>Let&rsquo;s be proactive and use continuous integration to prevent that from happening again.</p>

<p>Here is an example of a <code>.travis.yml</code> configuration that would run the tests using the lowest dependencies with PHP 5.3.3:</p>

<p>```yml
language: php</p>

<p>php:
  &ndash; 5.3.3
  &ndash; 5.3
  &ndash; 5.4
  &ndash; 5.5
  &ndash; 5.6
  &ndash; hhvm</p>

<p>matrix:
  include:</p>

<pre><code>- php: 5.3.3
  env: dependencies=lowest
</code></pre>

<p>before_script:
  &ndash; composer self-update
  &ndash; composer install -n
  &ndash; if [ &ldquo;$dependencies&rdquo; = &ldquo;lowest&rdquo; ]; then composer update &mdash;prefer-lowest &mdash;prefer-stable -n; fi;</p>

<p>script:
  &ndash; phpunit
```</p>

<p>You&rsquo;ll notice that we have to run <code>composer self-update</code> because Travis hasn&rsquo;t picked up the latest Composer version yet.</p>

<p>Here was the result on Travis:</p>

<p><img src="/images/posts/composer-lowest-dependencies.png"></p>

<p>A new job was added to the build matrix, and this job ran on PHP 5.3.3 with the lowest dependency versions.</p>

<p>If you are interested, have a look at <a href="https://github.com/mnapoli/PHP-DI/pull/219">the pull request</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decoupling packages]]></title>
    <link href="http://mnapoli.fr/decoupling-packages/"/>
    <updated>2014-09-21T23:00:00+02:00</updated>
    <id>http://mnapoli.fr/decoupling-packages</id>
    <content type="html"><![CDATA[<p>Decoupling packages is a hard thing. There are not a lot of options, and this blog post is about how some options are better than others.</p>

<p>Let&rsquo;s say for example that you are writing a &ldquo;package&rdquo;, or library, to respond to HTTP requests (that kind of package could be considered the basis for a web framework). How do you handle routing?</p>

<p>If you write your Router package as an independent package (which is good: small and specialized packages are more reusable and maintainable), you might not want to couple the HTTP package to the Router package: you want to leave users free to choose the router of their choice.</p>

<p>So, what are your options to make the HTTP package and the Router package decoupled from each other?</p>

<!--more-->


<h2>Events</h2>

<p>The first option is to turn to <strong>event-driven programming</strong>. By relying on an &ldquo;event manager&rdquo; library/package, you can have your package raise specific events at strategic points in your code. And you can have those events affect the code flow.</p>

<p>This is the solution chosen by Symfony to solve the routing problem exposed earlier. Their HttpKernel component is decoupled form their Routing component through events.</p>

<p>Here is the simplified code flow of their <code>HttpKernel</code> class/component (which is the basis for an HTTP application):</p>

<p>```php
$eventDispatcher->dispatch(</p>

<pre><code>KernelEvents::REQUEST,
new GetResponseEvent($this, $request, $type)
</code></pre>

<p>);</p>

<p>$controller = $request->attributes->get(&lsquo;_controller&rsquo;);</p>

<p>if (! $controller) {</p>

<pre><code>throw new NotFoundHttpException();
</code></pre>

<p>}
```</p>

<p>So here is what&rsquo;s happening:</p>

<ul>
<li>the <code>HttpKernel</code> raises a &ldquo;Kernel Request&rdquo; event</li>
<li>then <strong>it expects</strong> that a listener set the controller under the &ldquo;_controller&rdquo; key in the request</li>
</ul>


<p>So is <code>HttpKernel</code> decoupled from the <code>Router</code> component? <strong>Yes</strong>. The listener that sets the controller could actually be anything.</p>

<p>The problem is, as emphasized above, that the <code>HttpKernel</code> <strong>expects something very specific from the listeners</strong>. The whole application depends on an unknown listener being actually registered for that particular event and following an exact, <strong>unspecified</strong> behavior.</p>

<p>I believe events should be used for hooking up in the main logic flow to <em>extend it</em>. <strong>But the main logic flow should be linear and not rely on the possible <em>side effects</em> of an event.</strong></p>

<p>There are some other problems we can find with this solution:</p>

<ul>
<li>the package ends up coupled to the &ldquo;event manager&rdquo; package (you just replaced a dependency by another)</li>
<li>the code is not linear: it makes it much harder for developers to put the pieces back together and contribute to the project</li>
<li>behavior from decoupled packages <strong>are not specified by contracts</strong></li>
</ul>


<p>Regarding the pros:</p>

<ul>
<li>the behavior is <em>not specified</em>, which can also be a good thing: it leaves every possible option open for the future</li>
<li>might be simpler than the other options</li>
</ul>


<p><code>&lt;disclaimer&gt;</code>Just to be clear, Symfony is an exceptional framework and I love it. I am sure the decision to choose this option was carefully thought through, and the important thing to remember is that <strong>it works</strong>. Symfony is probably the most popular modern PHP framework, and my blog post doesn&rsquo;t change that. I am just using it as an example here, I just want to expose alternative options and discuss the pros and cons.<code>&lt;/disclaimer&gt;</code></p>

<h2>Interfaces and adapters</h2>

<p>I was mentioning <em>specifying behaviors</em> with <strong>contracts</strong>. In PHP (and most OO languages), you can implement this using <strong>interfaces</strong>.</p>

<p>If we take the previous example, an HTTP package could contain a <code>RouterInterface</code> to specify how a routing component should behave (this is a very basic example):</p>

<p>```php
namespace Acme\Http;</p>

<p>interface RouterInterface {</p>

<pre><code>/**
 * @return callable The controller to use for this request
 */
public function route(Request $request);
</code></pre>

<p>}
```</p>

<p>You&rsquo;ll notice that not everything is specifiable, e.g. the return types. Hopefully PHP will allow that in its next major version, but until then the only solution is to use documentation.</p>

<p>In the <code>HttpApplication</code> class, we can use it in type-hints to accept any implementation (classic dependency injection here). And here is what the code logic would look like:</p>

<p>```php
$controller = $router->route($request);</p>

<p>if (! $controller) {</p>

<pre><code>throw new NotFoundHttpException();
</code></pre>

<p>}
```</p>

<p><strong>The code flow is linear and completely explicit.</strong> And the HTTP package is decoupled from any Router package!</p>

<p>The only problem left: Router packages would be forced to implement <code>Acme\Http\RouterInterface</code> if they want to be used with the HTTP package. Because of that, they end up coupled to it… So how do we decouple Router packages from the HTTP package?</p>

<p>A way to go around that is to use <strong>adapters</strong>:</p>

<p>```php
namespace \MyApplication\Adapter;</p>

<p>class HttpRouterInterfaceAdapter implements \Acme\Http\RouterInterface {</p>

<pre><code>private $router;

public function __construct(\Acme\Router\Router $router) {
    $this-&gt;router = $router;
}

public function route(Request $request) {
      $this-&gt;router-&gt;route($request);
}
</code></pre>

<p>}
```</p>

<p>Thanks to that adapter, the <code>Router</code> class doesn&rsquo;t need to implement the <code>RouterInterface</code>. So it is completely decoupled from the HTTP package.</p>

<p>However, as you can see, it requires writing an adapter each time you want to &ldquo;connect&rdquo; decoupled packages.</p>

<p>Pros:</p>

<ul>
<li>linear and explicit code flow</li>
<li>specified behavior (using interfaces)</li>
</ul>


<p>Cons:</p>

<ul>
<li>requires to write interfaces</li>
<li>requires to write adapters</li>
</ul>


<p>This strategy of interfaces was recently used by <strong>Laravel</strong>. For the version 5.0 (IIRC), Laravel will publish a package named <a href="https://github.com/illuminate/contracts"><code>illuminate/contracts</code></a> which contains all the interfaces used by its other packages.</p>

<p>That allows to have decoupled Laravel packages while not needing adapters to use them together: packages can implement the interfaces at the very small cost of being coupled to <code>illuminate/contracts</code> (it&rsquo;s a small cost because the package is very light and contains only interfaces).</p>

<h2>Standardized interfaces</h2>

<p>Now the last option is to go a step beyond and try to make the interfaces &ldquo;<strong>standard</strong>&rdquo;. By that I mean that the same interface would be used by many packages, and implemented by many others.</p>

<p>The good example for this is obviously <strong>logging</strong>. There used to be a numerous amount of different logger libraries for PHP. Then the <a href="http://www.php-fig.org/">PHP-FIG</a> group worked to produce <a href="https://github.com/php-fig/log">PSR-3</a>, the logger standard.</p>

<p>Today, many logging packages implement the <code>Psr\Log\LoggerInterface</code>, and most modern frameworks type-hint against that interface instead of specific implementations. That means that users can choose any PSR-3 compliant logger and have their framework use it.</p>

<p>Needless to say that this is an ideal situation: <strong>no coupling, no effort</strong>! But logging was kind of an easy topic. It&rsquo;s very hard to come up with standards for all the other components that need interfaces, mainly because implementations often differ a lot.</p>

<p>The <a href="http://www.php-fig.org/">PHP-FIG</a> has been working for a few years on a Cache and an HTTP message PSR, and hopefully they will be released sometime. In the meantime, the <a href="https://github.com/container-interop/container-interop">container-interop project</a> aims at providing interfaces to standardize the usage of dependency injection containers.</p>

<h2>Conclusion</h2>

<p>OK, there&rsquo;s not much left to add here, if you have any reaction about this I&rsquo;d be happy to hear it. If I got anything wrong, I&rsquo;d be happy to correct it.</p>

<p>I would like to finish on an idea that was suggested about a year ago on the PHP internals mailing list: &ldquo;<strong>weak interfaces</strong>&rdquo;. Those are interfaces that define a behavior, but <strong>that do not need to be implemented by classes</strong>. It mixes the principle of static-typing with duck-typing:</p>

<blockquote><p>If it looks like a duck and quacks like a duck, then it&rsquo;s a duck.</p></blockquote>

<p>What&rsquo;s really good with this is that it allows packages to define their interfaces, and type-hint against it, all the while not requiring dependencies to actually implement it. As long as objects are compatible with the interface, it works. It&rsquo;s a sort of <code>class X implements Y</code> evaluated at runtime. Example:</p>

<p>```php
interface FooInterface {</p>

<pre><code>public function hello();
</code></pre>

<p>}</p>

<p>// Foo does not implement FooInterface
class Foo {</p>

<pre><code>// But this method makes it compatible with FooInterface
public function hello()
{
    return 'Hello world';
}
</code></pre>

<p>}</p>

<p>// That pseudo-syntax tells that this is a weak-interface type-hinting
function run(&lt;<FooInterface>> $foo) {</p>

<pre><code>echo $foo;
</code></pre>

<p>}</p>

<p>// It works because Foo is compatible with the interface
run(new Foo);</p>

<p>// Error, stdClass is not compatible with FooInterface
run(new stdClass);
```</p>

<p>This example was just for fun, but I wish such a feature would land in PHP (along with static return type). It would help a lot with package interoperability and decoupling.</p>

<p><strong>Update:</strong> the original RFC about what I called <em>weak interfaces</em> has been linked to me by its author, Anthony Ferrara. Here it is: <a href="https://wiki.php.net/rfc/protocol_type_hinting">PHP RFC: Structural Type Hinting</a>. As you can see, it was named <em>Structural type hinting</em> instead of <em>weak interface</em>.</p>

<p>It has also been pointed to me in the comments that the same Anthony Ferrara wrote a userland implementation of this: <a href="https://github.com/ircmaxell/Protocol-Lib">ProtocolLib</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A retrospective on open sourcing projects at My C-Sense]]></title>
    <link href="http://mnapoli.fr/retrospective-mycsense-open-source/"/>
    <updated>2014-07-01T18:00:00+02:00</updated>
    <id>http://mnapoli.fr/retrospective-mycsense-open-source</id>
    <content type="html"><![CDATA[<p>Today is my last day at <a href="http://www.myc-sense.com"><strong>My C-Sense</strong></a>, after almost 2 years working on creating and modernizing existing PHP applications. This has been an incredibly rich experience in an excellent work environment, I will surely miss this job and my colleagues.</p>

<p>Now is probably a good time to look back on our open source experience as a company, and as a developer. It all started when we moved all of our code to GitHub: we used a lot of open source software and libraries, and we thought we might try to contribute some day with some small internal projects too.</p>

<p>So that&rsquo;s how <a href="https://github.com/myclabs"><strong>MyCLabs</strong></a> was born: let&rsquo;s keep the door open for open source because &ldquo;why not&rdquo;.</p>

<!-- more -->


<h2>jquery.confirm</h2>

<p>The first project was born out of a simple need: a confirmation box on some buttons and links. We were using Bootstrap, but adding all the JS and HTML needed for such a simple thing was definitely worth a JS function. So instead of a quick and dirty solution, I turned to jQuery and learned how plugins worked, just for fun and because it wasn&rsquo;t a big investment. In no time, <a href="https://github.com/myclabs/jquery.confirm"><strong>jquery.confirm</strong></a> was born (the <a href="http://myclabs.github.io/jquery.confirm">demo is here</a>).</p>

<p>The project was absolutely not ambitious, yet it&rsquo;s probably our most successful project yet. It has <em>30 forks</em>, received 10 pull requests and has 13 releases. That&rsquo;s not much, but for a simple confirmation dialog, it&rsquo;s quite nice.</p>

<p>And what&rsquo;s interesting is that it&rsquo;s the perfect example of an open source &ldquo;success&rdquo; from the company&rsquo;s point of view: we receive much more contributions than we contribute to it ourselves. We get bugfixes &ldquo;for free&rdquo;, and we even got our migration to Bootstrap 3 covered for us <a href="https://github.com/myclabs/jquery.confirm/pull/10">by a contributor</a>. Which company wouldn&rsquo;t want that?</p>

<h2>PHP Enum</h2>

<p>The next project open sourced was a bit different. <a href="https://github.com/myclabs/php-enum"><strong>PHP Enum</strong></a> is an implementation of an Enum structure for PHP. That&rsquo;s probably not the first time you hear about something like that, so here is why we created one:</p>

<ul>
<li><a href="http://php.net/manual/en/class.splenum.php">SplEnum</a> seems like a good solution, but it is actually a separate PHP extension that needs to be installed (which makes it useless IMO)</li>
<li>the other open source implementations were not good enough: either they were too far from SplEnum (which means most of the time they were working in a weird way), either they were a direct clone of SplEnum and there was a bit of room for improvement. If you do a search today, you&rsquo;ll find other good libraries that were different or non-existant at the time</li>
</ul>


<p>We ended up using it in some places in our application, and I ended up using it in <a href="http://php-di.org">PHP-DI</a>. We received a few contributions, but obviously there&rsquo;s not a lot of room for bugs or new features since it&rsquo;s very simple.</p>

<p>In the end, this library has been installed <em>more than 16 000 times</em>, which is definitely a lot and that makes us happy (PHP-DI installs might represent a good share of that).</p>

<h2>MyCLabs\ACL</h2>

<p><a href="http://myclabs.github.io/ACL/"><strong>MyCLabs\ACL</strong></a> is the one I&rsquo;m the most proud of. We have been working on <em>the ACL problem</em> and <strong>access control</strong> for more than 4 years (I&rsquo;ve been on and off at My C-Sense), changing, improving and rewriting our solution about every year. It has been a major headache, especially since it&rsquo;s a problem that leaks everywhere: in the model, at the database level, at the routing level, in the views, … And its impact on performance was definitely one of the biggest challenge.</p>

<p>We were always looking at all the existing PHP solutions, but none of them was ever <em>even close</em> to fit our need. We&rsquo;ve always been amazed about this, because we are sure many other companies have the same needs as us.</p>

<p>So because of all this, our ACL system was something I definitely wanted to open source some day. But given its complexity, and the fact it was deeply coupled to our application, it was impossible. Then came Doctrine 2.4, and then 2.5, and it changed a lot of things. As the next big rewrite (again) was planned, I suggested we tried to make it open source. And that would not mean &ldquo;just publish the code online&rdquo;. That would mean make the effort on making a completely decoupled library with tests and documentation.</p>

<p>It took a few weeks to build it, and the company paid for that effort. But it was greatly rewarded with a solution much more solid and powerful than we ever built.</p>

<p><strong>Thinking and building our code on in a more generic way was definitely beneficial.</strong> We previously had an unstable, half-tested, undocumented, slow and unmaintainable ACL system. We wouldn&rsquo;t dare touch it in fear of breaking everything. We now have a very powerful, tested, fast and documented solution. Yes it took time, but it was definitely worth it.</p>

<p>And I think this library is a perfect example of how <strong>open source was beneficial, even without any external contribution</strong>.</p>

<p>And as a developer, making the library open source turned the <em>most boring problem on earth</em> (permissions!) into a fascinating one! I couldn&rsquo;t stop thinking about it out of work when I was working on it.</p>

<p>My C-Sense is now working on a <a href="https://github.com/myclabs/ACL/pull/9">v2</a>, with a much more simpler configuration and usage (much less boilerplate code). That&rsquo;s so interesting that I&rsquo;ll probably be following the project and maybe helping out if I have the time ;)</p>

<h2>MyCLabs\Work</h2>

<p>The ACL project had been a success, so when we ended up moving away from Gearman and thus rewriting our worker system (coupling, coupling…), I suggested we tried building an open source solution for it. Here&rsquo;s <a href="http://myclabs.github.io/Work/"><strong>MyCLabs\Work</strong></a>.</p>

<p>Of course, I had a look at everything that could fit the bill. But again, we needed a feature that wasn&rsquo;t provided by any open source library I could find:</p>

<blockquote><p>That task is too long, it needs to run in background and the user will be notified by email when it finishes. But sometimes it can be very fast, so receiving an email is useless and looks stupid.</p>

<p>So we want to run the task in background, but if it takes less than 5 seconds, we need to show the result to the user directly (in the web page) as if it didn&rsquo;t run in background. And of course, the worker shouldn&rsquo;t send any email!</p></blockquote>

<p>That looks like a very simple need from a user&rsquo;s point of view. But when you realize that it means you must have a <strong>bidirectional communication</strong> between the web page and the background worker, you start going &ldquo;oh no no no&rdquo;.</p>

<p>Now we just ditched Gearman (because of too many bugs and installation problems), and we didn&rsquo;t want to tie ourselves again to a different work queue. So our library was built against 2 needs:</p>

<ul>
<li>an abstraction over different queue systems (RabbitMQ, Beanstalkd, InMemory…)</li>
<li>an abstraction over the &ldquo;run and wait if it finishes else …&rdquo;</li>
</ul>


<p>Of course, the <code>run and wait</code> wasn&rsquo;t possible on every queue system, so it needed to be something optional. So I ended up writing 2 interfaces:</p>

<p>```php
interface WorkDispatcher
{</p>

<pre><code>public function run(Task $task);
</code></pre>

<p>}</p>

<p>interface SynchronousWorkDispatcher extends WorkDispatcher
{</p>

<pre><code>public function runAndWait(
    Task $task,
    $wait = 0, // time to wait, in seconds
    callable $completed = null,
    callable $timedout = null,
    callable $errored = null
);
</code></pre>

<p>}
```</p>

<p>(the details are documented <a href="http://myclabs.github.io/Work/">here</a>)</p>

<p>For example, the Beanstalkd adapter doesn&rsquo;t implement <code>SynchronousWorkDispatcher</code>, whereas the RabbitMQ adapter does.</p>

<p>Now where it begins to be interesting is that there is no queue system that provides out of the box bidirectional communication with a worker (at least in the one I reviewed at that time, the one with a good PHP lib and the one that can be installed). After several days of thinking and trials, I managed to implement the <code>runAndWait</code> behavior in RabbitMQ with the use of a temp queues and some sort of high level &ldquo;protocol&rdquo;. Maybe not the fastest solution on earth, but for our needs it wasn&rsquo;t a problem at all. If you are curious, you can checkout <a href="https://github.com/myclabs/Work/tree/master/src/Adapter/RabbitMQ">here</a> how it is implemented.</p>

<p>In the end, this is really was this library does: it <strong>abstract</strong> 2 behaviors: simply run a task in background, and run a task and wait for its result.</p>

<p>MyCLabs\Work now has adapters for RabbitMQ, Beanstalkd and &ldquo;In Memory&rdquo; (i.e. for your development machine), you are welcome to push new adapters through pull requests. It&rsquo;s very simple if you don&rsquo;t implement the <code>SynchronousWorkDispatcher</code> interface, for example <a href="https://github.com/myclabs/Work/tree/master/src/Adapter/Beanstalkd">look at the Beanstalkd adapter</a>.</p>

<h2>DeepCopy</h2>

<p><a href="https://github.com/myclabs/DeepCopy"><strong>DeepCopy</strong></a> is a small utility that helps you create deep copies of objects. By deep copy, I mean when you want to duplicate/clone an object <em>and it&rsquo;s sub-objects</em>.</p>

<p>Imagine you need to provide the user a way to &ldquo;duplicate a folder&rdquo;. The user will expect all the files and subfolders to be duplicated too. PHP&rsquo;s <code>clone</code> will do a shallow copy, which means it will only clone the root object, the properties of the cloned object will reference the same objects as the original object.</p>

<p>The &ldquo;built-in&rdquo; PHP solution would be to override <code>__clone()</code>, but that leads to quite complex code, and handling cycling dependencies is very hard.</p>

<p>DeepCopy will handle all that for you. And on top of it, it&rsquo;s completely configurable: you can skip properties, force them to keep their original value, or set them to <code>null</code>. DeepCopy also supports resolving Doctrine&rsquo;s collections and proxies.</p>

<h2>ArrayComparator</h2>

<p><a href="https://github.com/myclabs/ArrayComparator"><strong>ArrayComparator</strong></a> is a bit like DeepCopy: it&rsquo;s a small utility for comparing arrays containing objects. It let&rsquo;s you define callbacks that will be called when items are different or missing between arrays.</p>

<h2>Contributions to other open source projects</h2>

<p>While we use the <a href="https://github.com/myclabs">MyCLabs</a> organization to publish open source libraries, we also use it to host forks of other libraries. That had become quite handy when we proposed a bugfix for Doctrine: let&rsquo;s install our fork instead of the original repo. By the way, <a href="http://mnapoli.fr/overriding-dependencies-with-composer/">here is how to do it with Composer</a>.</p>

<p>So up to now, we contributed mostly to <a href="http://doctrine-project.org">Doctrine</a>, the <a href="https://github.com/Atlantic18/DoctrineExtensions">DoctrineExtensions</a> and <a href="https://github.com/PHPOffice/PHPExcel">PHPExcel</a>.</p>

<h2>A word on documentation</h2>

<p><em>This part is a bit of self-promotion :)</em></p>

<p>We ended up having 2 kinds of projects:</p>

<ul>
<li>small projects where the GitHub project and a single Readme would be enough</li>
<li>larger projects with multi-pages documentation</li>
</ul>


<p>For larger projects, we have been using <a href="http://mnapoli.fr/Couscous/"><strong>Couscous</strong></a> to generate the websites from the Markdown documentation.</p>

<p>It is working pretty well, the local preview is useful and deploying is very simple. And with the newly implemented templates it proved to be even more useful: I have written a <a href="https://github.com/myclabs/couscous-template">Couscous template for MyCLabs projects</a>, and I use it for <a href="http://myclabs.github.io/ACL/">MyCLabs\ACL</a> and MyCLabs\Work.</p>

<p>If you too want to use GitHub Pages to publish a website based on your documentation, give it a try.</p>

<h2>Conclusion</h2>

<p>This was a big list of most of My C-Sense&rsquo;s open source projects. There are even some more that I didn&rsquo;t mention (because the article is getting quite long), so check out <a href="https://github.com/myclabs">MyCLabs page</a>.</p>

<p>To conclude on the open source experience <em>from the company&rsquo;s point of view</em> (and this is my own opinion here), I can only find it beneficial.</p>

<p>Of course, don&rsquo;t expect to get contributions right away and have your software developed for you. Out of all the project we open sourced, we only got a dozen of pull requests. And you have to realize that it takes time to manage them, and the issues (which sometimes are just people asking for help). Remember than an open source project not maintained is hurting the community rather than helping it.</p>

<p>That being said, there are many advantages:</p>

<ul>
<li>an open source library usually mean <strong>better quality</strong>, because that code is public. I would much more restrain from committing a dirty hack if I know the code will be online for years :p But mainly it really help the developer to take a step back and really think about what the library is supposed to do in a more generic way, and also to be more open to other implementations.</li>
<li>a company involved in open source projects looks sexy to developers. <strong>Recruiting</strong> is (I presume) easier, and also it allows to attract and recruit good developers: they know what kind of code and quality level to expect, just like the recruiter does when he browses GitHub profiles of candidates.</li>
<li>open sourced code get fixes and improvements… sometimes. And for free… almost (if you consider the time needed to merge/handle the tickets)</li>
<li><strong>developers do a better work</strong>: publishing an open source project online, or contributing to one, is a great experience. You contribute for something more timeless than your job. The code you write might be used by your peers across the world for year! That&rsquo;s challenging and exciting.</li>
</ul>


<p>The last point is also about the developer&rsquo;s point of view: working on open source projects is an additional source of motivation and involvement. And of course it benefits everyone.</p>

<p>So, companies: <em>as long as you don&rsquo;t make money over it, think about open sourcing it?</em></p>

<p>Now I will finish with a very warm thank you to My C-Sense and its founders for trusting us and letting us try. Open source has had a very positive result up to now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MetaModel and MetaConsole to debug your application]]></title>
    <link href="http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application/"/>
    <updated>2013-09-13T16:08:00+02:00</updated>
    <id>http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application</id>
    <content type="html"><![CDATA[<p>I started working a few months ago on <a href="https://github.com/mnapoli/MetaModel">MetaModel</a>, a language that enables to <strong>traverse and operate your PHP model</strong>.</p>

<p>Today I&rsquo;m going to show you how you can use MetaModel through the <a href="https://github.com/mnapoli/MetaConsole">MetaConsole</a> to debug your application.</p>

<p><img src="/images/posts/metaconsole3.gif"></p>

<!-- more -->


<h2>Setup</h2>

<p>To integrate the MetaConsole to your project, it&rsquo;s very simple using Composer:</p>

<p>```json
{</p>

<pre><code>"require-dev": {
    "mnapoli/metaconsole": "dev-master"
}
</code></pre>

<p>}
```</p>

<p>Now I create a <code>bin/meta.php</code> file (name it as you like) in my application:</p>

<p>```php</p>

<h1>!/usr/bin/env php</h1>

<p>&lt;?php
use MetaModel\Bridge\Doctrine\EntityManagerBridge;
use MetaModel\Bridge\PHPDI\PHPDIBridge;
use MetaModel\MetaModel;</p>

<p>// Here I set up my application (bootstrap)
require_once <strong>DIR</strong> . &lsquo;/../application/init.php&rsquo;;</p>

<p>$metaModel = new MetaModel();</p>

<p>// Integrate with the Doctrine EntityManager
$entityManager = /<em> &hellip; </em>/;
$metaModel->addObjectManager(new EntityManagerBridge($entityManager));</p>

<p>// Integrate with PHP-DI container
$container = /<em> &hellip; </em>/;
$metaModel->addContainer(new PHPDIBridge($container));</p>

<p>$console = new MetaConsole\Application(&lsquo;MetaConsole&rsquo;, null, $metaModel);
$console->run();
```</p>

<p>As you can see, I can integrate the console with my ORM (<a href="http://www.doctrine-project.org/">Doctrine 2</a> here) and my DI container (<a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>). You can write bridges for other kinds of object managers or containers (and feel free to submit a Pull Request too).</p>

<h2>Using</h2>

<p>Last week, I had a bug in my application, and it was very difficult to debug because it involved data, and that was not the kind of bug you can reproduce and fix using unit tests because it involved a lot of objects. Without MetaConsole, I would have had to dig through the database using phpMyAdmin or MySQL Workbench, writing queries and joining dozens of tables.</p>

<p>Instead, I launched MetaConsole, and I selected an object for which I had an ID (the ID was in the URL of the webpage I wanted to debug):</p>

<p><code>
AF_Model_InputSet(562)
</code></p>

<p>This query will select the entity <code>AF_Model_InputSet</code> with ID 562, and dump it to the screen. To do this, MetaModel queries Doctrine, which roughly translate to this PHP code:</p>

<p><code>php
$entity = $entityManager-&gt;find('AF_Model_InputSet', 562);
</code></p>

<p>Now that I had my object on screen, I could <strong>traverse the object graph</strong> (through associations, getters, arrays, …) with more precise queries:</p>

<p><img src="/images/posts/metaconsole1.png"></p>

<p>In the end, I ended up finding my bug: one component was marked as &ldquo;required&rdquo; but had a number of required fields > 0 (not normal!). I fixed the code, and now I needed to rebuild some data to have everything in sync again (after my tests). That&rsquo;s the kind of operation that can&rsquo;t be done just on a single object through the website.</p>

<p>No problem, MetaModel let&rsquo;s you traverse an object graph, but also <strong>call methods on objects and on services:</strong></p>

<p><img src="/images/posts/metaconsole2.png"></p>

<h2>Conclusion</h2>

<p>MetaModel is pretty much stable, though there are a lot of features I want to add (arguments in method calls, …).</p>

<p>On the other side, MetaConsole is still in development, and I hope to provide better integration with frameworks and a more enjoyable interface. If you are interested, you can try it (it&rsquo;s a development tool, so there&rsquo;s no risk since you shouldn&rsquo;t use it in production), and you can <a href="https://github.com/mnapoli/MetaConsole">improve it</a>.</p>

<p>And also, ideas are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code coverage reports with GitHub, Travis and Coveralls]]></title>
    <link href="http://mnapoli.fr/code-coverage-reports-with-github-travis-and/"/>
    <updated>2013-06-08T20:00:00+02:00</updated>
    <id>http://mnapoli.fr/code-coverage-reports-with-github-travis-and</id>
    <content type="html"><![CDATA[<p>You have a PHP project hosted on GitHub with continuous integration using Travis-CI?</p>

<p>How about setting up <strong>code coverage reports</strong>?</p>

<p>For example, here is the code coverage report of <a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>: <a href="https://coveralls.io/r/mnapoli/PHP-DI?branch=master"><img src="https://coveralls.io/repos/mnapoli/PHP-DI/badge.png?branch=master" alt="Coverage Status" /></a> (click on the link to see the details).</p>

<!-- more -->


<p>To do so, you will need to create an account and enable your project at <a href="https://coveralls.io/">Coveralls</a>. Then add this to your <code>composer.json</code>:</p>

<p>```json
&ldquo;require-dev&rdquo;: {</p>

<pre><code>"satooshi/php-coveralls": "dev-master"
</code></pre>

<p>}
```</p>

<p>Finally, update your <code>.travis.yml</code> configuration:</p>

<p>```yaml
language: php</p>

<p>php:
 &ndash; 5.3
 &ndash; 5.4
 &ndash; 5.5</p>

<p>before_script:
 &ndash; wget <a href="http://getcomposer.org/composer.phar">http://getcomposer.org/composer.phar</a>
 &ndash; php composer.phar install &mdash;dev &mdash;no-interaction</p>

<p>script:
 &ndash; mkdir -p build/logs
 &ndash; phpunit &mdash;coverage-clover build/logs/clover.xml</p>

<p>after_script:
 &ndash; php vendor/bin/coveralls -v
```</p>

<p>Now if you commit and push, Travis will run the tests and push the code coverage results to Coverall. Check out your project page on Coverall!</p>
]]></content>
  </entry>
  
</feed>
