<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous-integration | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/continuous-integration/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2015-07-27T16:21:38+02:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test against the lowest Composer dependencies on Travis]]></title>
    <link href="http://mnapoli.fr/test-lowest-dependencies/"/>
    <updated>2014-12-17T18:00:00+01:00</updated>
    <id>http://mnapoli.fr/test-lowest-dependencies</id>
    <content type="html"><![CDATA[<p>Composer just got a <a href="https://github.com/composer/composer/pull/3450">new awesome addition</a> thanks to <a href="https://twitter.com/nicolasgrekas">Nicolas Grekas</a>: prefer the lowest versions of your dependencies.</p>

<p><code>
composer update --prefer-lowest
</code></p>

<p>This amazing option will install the lowest versions possible for all your dependencies.</p>

<p>What for? <strong>Tests</strong> of course!</p>

<!--more-->


<h2>Update Composer</h2>

<p>OK before we get started, don&rsquo;t forget to update Composer right now if you want to use the new option:</p>

<p><code>
sudo composer self-update
</code></p>

<h2>Testing against lowest dependencies</h2>

<p>It might not make a lot of sense to test an <strong>application</strong> against its lowest dependencies, because unless something is done wrong it will be installed with controlled versions.</p>

<p>However, for <strong>libraries</strong> (or <em>components</em>…) it&rsquo;s a very good thing.</p>

<p>To give you an example, I wanted to give it a try and ran <code>composer update --prefer-lowest</code> in <a href="http://php-di.org">PHP-DI</a>&rsquo;s directory: all hell broke loose… PHPUnit wouldn&rsquo;t even start.</p>

<p>The reason for this were multiples, but they all boiled down to:</p>

<ul>
<li>I used a feature that didn&rsquo;t yet exist in version X of dependency Y</li>
<li>or dependency Y had a bug in version X</li>
</ul>


<p><strong>and I allowed installing that problematic version X in <code>composer.json</code></strong>.</p>

<p>In the end, I was distributing a library that <em>could</em> not work at all (if people had insane version constraints).</p>

<h2>Setting up tests on Travis</h2>

<p>Let&rsquo;s be proactive and use continuous integration to prevent that from happening again.</p>

<p>Here is an example of a <code>.travis.yml</code> configuration that would run the tests using the lowest dependencies with PHP 5.3.3:</p>

<p>```yml
language: php</p>

<p>php:
  &ndash; 5.3.3
  &ndash; 5.3
  &ndash; 5.4
  &ndash; 5.5
  &ndash; 5.6
  &ndash; hhvm</p>

<p>matrix:
  include:</p>

<pre><code>- php: 5.3.3
  env: dependencies=lowest
</code></pre>

<p>before_script:
  &ndash; composer self-update
  &ndash; composer install -n
  &ndash; if [ &ldquo;$dependencies&rdquo; = &ldquo;lowest&rdquo; ]; then composer update &mdash;prefer-lowest &mdash;prefer-stable -n; fi;</p>

<p>script:
  &ndash; phpunit
```</p>

<p>You&rsquo;ll notice that we have to run <code>composer self-update</code> because Travis hasn&rsquo;t picked up the latest Composer version yet.</p>

<p>Here was the result on Travis:</p>

<p><img src="/images/posts/composer-lowest-dependencies.png"></p>

<p>A new job was added to the build matrix, and this job ran on PHP 5.3.3 with the lowest dependency versions.</p>

<p>If you are interested, have a look at <a href="https://github.com/mnapoli/PHP-DI/pull/219">the pull request</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code coverage reports with GitHub, Travis and Coveralls]]></title>
    <link href="http://mnapoli.fr/code-coverage-reports-with-github-travis-and/"/>
    <updated>2013-06-08T20:00:00+02:00</updated>
    <id>http://mnapoli.fr/code-coverage-reports-with-github-travis-and</id>
    <content type="html"><![CDATA[<p>You have a PHP project hosted on GitHub with continuous integration using Travis-CI?</p>

<p>How about setting up <strong>code coverage reports</strong>?</p>

<p>For example, here is the code coverage report of <a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>: <a href="https://coveralls.io/r/mnapoli/PHP-DI?branch=master"><img src="https://coveralls.io/repos/mnapoli/PHP-DI/badge.png?branch=master" alt="Coverage Status" /></a> (click on the link to see the details).</p>

<!-- more -->


<p>To do so, you will need to create an account and enable your project at <a href="https://coveralls.io/">Coveralls</a>. Then add this to your <code>composer.json</code>:</p>

<p>```json
&ldquo;require-dev&rdquo;: {</p>

<pre><code>"satooshi/php-coveralls": "dev-master"
</code></pre>

<p>}
```</p>

<p>Finally, update your <code>.travis.yml</code> configuration:</p>

<p>```yaml
language: php</p>

<p>php:
 &ndash; 5.3
 &ndash; 5.4
 &ndash; 5.5</p>

<p>before_script:
 &ndash; wget <a href="http://getcomposer.org/composer.phar">http://getcomposer.org/composer.phar</a>
 &ndash; php composer.phar install &mdash;dev &mdash;no-interaction</p>

<p>script:
 &ndash; mkdir -p build/logs
 &ndash; phpunit &mdash;coverage-clover build/logs/clover.xml</p>

<p>after_script:
 &ndash; php vendor/bin/coveralls -v
```</p>

<p>Now if you commit and push, Travis will run the tests and push the code coverage results to Coverall. Check out your project page on Coverall!</p>
]]></content>
  </entry>
  
</feed>
