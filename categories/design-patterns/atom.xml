<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design-patterns | Matthieu Napoli]]></title>
  <link href="http://mnapoli.github.io/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://mnapoli.github.io/"/>
  <updated>2013-09-10T22:55:33+02:00</updated>
  <id>http://mnapoli.github.io/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The “Optional Singleton” pattern]]></title>
    <link href="http://mnapoli.github.io/the-optional-singleton-pattern/"/>
    <updated>2013-03-22T20:00:00+01:00</updated>
    <id>http://mnapoli.github.io/the-optional-singleton-pattern</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> is a practical design pattern, that’s the reason it is so popular amongst beginners. It is also an anti-pattern because of the problems it introduces (global state, difficult to test, …).</p>

<p>While I agree with that, and the fact that Singletons should be used with (a lot of) moderation, I also like an alternative pattern which comes with the advantage of the singleton and balances out its disadvantages. This can be useful if you have to work on a codebase that has singletons.</p>

<p>I’m calling this pattern the <strong>Optional Singleton</strong> for lack of a better name.</p>

<p>Simply put, this is a class which you can use as a singleton, or not (it’s optional ;):</p>

<ul>
<li>you can still use the handy <code>MySingleton::getInstance()</code></li>
<li>you can however create new instances of the class, for example for tests</li>
</ul>


<!-- more -->


<p>There is nothing revolutionary about it, see for yourself:</p>

<p><div><script src='https://gist.github.com/5221664.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Of course, this is a pattern that has to be used where it makes sense. Singletons, as cool as they can be, will never do better than dependency injection.</p>

<hr />

<p><strong>Update</strong>: I’ve received numerous responses (mostly “the singleton is an anti-pattern” which I agree to). Here is one of my response that I’d like to have here as well:</p>

<blockquote><p>The entire point of the singleton pattern is that you <strong>can’t</strong> instantiate the class. That’s why the pattern is called singleton.</p></blockquote>

<p>My answer:</p>

<blockquote><p>Yes, but in 90% of its derived usage it’s not because we want only one instance, it’s because it’s practical.</p>

<p>Quote from wikipedia: “There is criticism of the use of the singleton pattern, as some consider it an anti-pattern, judging that it is overused, <strong>introduces unnecessary restrictions in situations where a sole instance of a class is not actually required</strong>, and introduces global state into an application.”</p>

<p>For example one may use the singleton pattern for services: accessing them is practical, you can access them anywhere with the singleton pattern. I’ve seen codebases with this pattern.</p>

<p>Now if I come on a codebase using the singleton for services, and if I can’t rewrite everything, I’ll turn the Singletons into “Optional Singletons” so that the existing code still work, and so that I can use Dependency Injection over those services in the new code that I’ll write.</p></blockquote>
]]></content>
  </entry>
  
</feed>
