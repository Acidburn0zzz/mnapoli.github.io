<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: best-practices | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/best-practices/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2014-01-08T15:07:59+01:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Should you really write ugly code? Spoiler: no]]></title>
    <link href="http://mnapoli.fr/should-you-really-write-ugly-code-no/"/>
    <updated>2013-06-09T20:00:00+02:00</updated>
    <id>http://mnapoli.fr/should-you-really-write-ugly-code-no</id>
    <content type="html"><![CDATA[<p>I recently stumbled upon François Zaninotto’s blog post: <a href="http://redotheweb.com/2013/06/04/you-should-write-ugly-code.html">You should write ugly code</a>. While he makes several good points, I strongly disagree with him and I feel the urge to give my opinion on the matter (what did you expect, this is a blog).</p>

<p>The point that he makes is that he encourages developers to write “ugly code”, i.e. code that works and that doesn’t follow best practices or anything related to code quality.</p>

<blockquote><p>[..] developers shouldn’t care about code beauty, because that’s not their job. Instead, they should focus on creating great products, which is infinitely more satisfying.</p></blockquote>

<p>Later, he insists that by writing ugly code, we ship faster than if we had to worry and handle code quality. And shipping faster is good for the business.</p>

<p>Well that’s true. That’s called <strong>Technical Debt</strong>. And like any debt, you’ll have to repay later.</p>

<p><img src="/images/posts/technical-debt.png" width="400"></p>

<!-- more -->


<p><em>Technical debt diagram, borrowed from Planet Geek for the (awesome) “<a href="http://www.planetgeek.ch/2013/06/05/clean-code-cheat-sheet/">Clean Code cheat sheet</a>“.</em></p>

<p>Payback is a bitch and future-you will be cursing present-you for writing ugly code. The cost of change is directly affected, and when you tell your boss that Feature B will takes 2 weeks, he will point out that Feature A took only 2 days.</p>

<p>I won’t get radical as well and say that you should alway write “beautiful code”. What I advocate for is to carefully choose your side.</p>

<p>You need to get a prototype working for a demo? Then get it done quick and dirty! Heck I even used <a href="http://php.net/manual/fr/function.mysql-query.php">mysql_query</a> on an internal website once, and it worked. I know that this website will never need any real maintenance, so I can sleep without fearing for <a href="http://www.codinghorror.com/blog/2008/06/coding-for-violent-psychopaths.html">violent psychopaths</a>.</p>

<p>But if you plan on writing software that will be maintained for a few years, you would definitely earn by writing beautiful code. Code quality earns you money, and that’s something difficult for managers to get (especially if they have never developed, or never seen code quality benefits before). I once took part on the rewrite of a whole application. After the rewrite, the manager was completely amazed that we needed only a few days to do what would systematically take a month or two before.</p>

<p>I’d like to finish on his take about “<em>coding trends</em>” and what he calls “<em>trend setters</em>” like Eric Evans with his <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>. DDD is not a trend, it is a set of patterns and methods to help you in specific situations. <a href="http://www.amazon.com/dp/0321125215/ref=cm_sw_su_dp">Evans book</a> is very clear about it: DDD can be unhelpful if you try to use it everywhere. That is very reductive to say that all these kind of people (Evans, Martin Fowler, Jeff Atwood) do is “<em>to explain why pattern A is better than pattern B. Until someone else publishes a book, explaining that pattern C is much, much better.</em>”</p>

<p>Thanks to these guys, and best practices in general, I make my company earn money with apps that don’t need to be rewritten every year. I can work on my colleague’s code without pulling my hair and wishing him a painful death. I can participate to Open Source projects because I can understand the code.</p>

<p><strong>TL;DR</strong></p>

<ul>
<li>Go quick and dirty, but expect troubles on the long run</li>
<li>Care about quality, that will slow you down but get you farther</li>
</ul>


<p>Both are valid options, but choose carefully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be a better programmer: take a step back]]></title>
    <link href="http://mnapoli.fr/be-a-better-programmer-take-a-step-back/"/>
    <updated>2013-02-04T20:00:00+01:00</updated>
    <id>http://mnapoli.fr/be-a-better-programmer-take-a-step-back</id>
    <content type="html"><![CDATA[<p><em>Replace [client] by [boss] or anything of the kind if you prefer.</em></p>

<h2>A day at work</h2>

<blockquote><p><strong>Bug #3890 from Client</strong></p>

<p>There is an application crash, it says “division by zero error in SpeedCalculator::compute()”.</p>

<p>Please fix ASAP!</p></blockquote>

<!-- more -->


<p>You open <code>SpeedCalculator.php</code> to find:</p>

<p>```php
public function compute() {</p>

<pre><code>return $this-&gt;distance / $this-&gt;time;
</code></pre>

<p>}
```</p>

<h2>Fixing the bug</h2>

<p>Easy! Who wrote that code anyway, how could he not think of that!</p>

<p>```php
public function compute() {</p>

<pre><code>if ($this-&gt;time == 0) {
    return 0;
}
return $this-&gt;distance / $this-&gt;time;
</code></pre>

<p>}
```</p>

<p>There you go, the bug is fixed in 2 minutes.</p>

<p>Later, the same bug is found in <code>RatioCalculator</code> and <code>MoneyCalculator</code>, but once these are fixed too, everyone in the team is sure the problem won’t appear anywhere, it’s gone, for sure this time! The code is rock solid now!</p>

<p>A month later, another bug pops in. The application does not crash anymore, but the client happens to see wrong calculation results in his reports because of the <code>return 0;</code>.</p>

<h2>Take a step back</h2>

<p>What if, instead of rushing, we took a step back.</p>

<blockquote><p>Why did this situation happen?</p>

<p><code>$this-&gt;time</code> was set to 0.</p></blockquote>

<p>Easy! Let’s prevent that.</p>

<p>```php
public function setTime($time) {</p>

<pre><code>if ($time == 0) {
    throw new InvalidArgumentException("Invalid value");
}
$this-&gt;time = $time;
</code></pre>

<p>}
```</p>

<p>Now this is better, you guarantee the integrity of the data. But the client is not very happy! When he fills the form with a time of 0, the application shows an error page.</p>

<p>So you work on displaying a nice error message by catching the exception in the controller.</p>

<p>When you’re done, you realize you also got the same thing to do for RatioCalculator and MoneyCalculator, so you copy paste and you are good to go.</p>

<p>Wait a minute, the client prefers that the error message is displayed in orange rather than red. So you change the color and copy-paste the code again.</p>

<h2>Take another step back</h2>

<p><strong>What if, instead of fixing a bug, you answered a need?</strong></p>

<p>Why did the client put 0 in the form? Because he made a mistake.</p>

<p>What is needed here?</p>

<ul>
<li>Is it <strong>only</strong> making sure the time that the user inputs in “speedCalculationForm” is ≠ 0?</li>
<li>Is it <strong>only</strong> making sure the “speedCalculationForm” contains valid data?</li>
<li><strong>Or is it validating all user inputs?</strong></li>
</ul>


<p>So what about a validation library for example?</p>

<p>Waaaaait! Don’t go and write one yourself! For the love of god, take a step back, breathe, and look at what already exists.</p>

<h2>Needs</h2>

<p>We, programmers, love being technical. When your client or your boss thinks out loud about what he wants, we can’t help but imagine how we could implement it.</p>

<p>But we need be able to take a step back. If we want to be really good in our jobs, <strong>we have to understand the needs before thinking about solutions</strong>. And that takes a lot of effort.</p>

<p>Does the client really need “a blinking button that moves away when you try to click on it?” or does he need something else, something that he doesn’t know about and that you could help him define? And the same goes for yourself! Do you really need to open a file and write some infos in there, or do you simply need a logging system?</p>

<p>Take a step back, try and see the big picture. Because one may be a very good programmer, but code’s purpose is to answer a need.</p>

<p>Not a <em>&ldquo;fix the bugs in the bug tracker&rdquo;</em> kind of need, but rather a <em>&ldquo;I want an application will help me calculate speed based on input data, and if I type in invalid data then for fuck’s sake just tell me don’t go and calculate some weird results&rdquo;</em>.</p>
]]></content>
  </entry>
  
</feed>
