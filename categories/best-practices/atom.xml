<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: best-practices | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/best-practices/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2016-11-24T23:13:08+01:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Approaching coding style rationally]]></title>
    <link href="http://mnapoli.fr/approaching-coding-style-rationally/"/>
    <updated>2015-11-12T18:00:00+01:00</updated>
    <id>http://mnapoli.fr/approaching-coding-style-rationally</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about how to format code and name things.</p>

<p><img src="/images/posts/pitchforks.jpg" width="300"></p>

<p>I remember when PSR-1 and PSR-2 became a thing. Jeez that &ldquo;use only spaces&rdquo; thing was just ridiculous, I <em>knew</em> that tabs where better (right?). And those crazy formatting rules were the opposite of what I was used to. Nonsense! One day I did the jump and after a few weeks, I just didn&rsquo;t care anymore. I was over it, just like everyone else did, and <a href="http://www.php-fig.org/psr/psr-2/">PSR-2</a> was my new religion.</p>

<p>Fast forward a few years and I&rsquo;m at a talk where the speaker argues to use <a href="https://en.wikipedia.org/wiki/Snake_case">snake case</a> for naming test methods. Dude, you crazy? We just finally got consistent style across all the PHP world! And we all know that camelCase <em>looks much better</em> right? How can I go against PSR-2? It turns out, after trying it, that this was a wonderful idea…</p>

<p>Habits are sometimes making us blind. We think X looks prettier than Y but that&rsquo;s just the habit speaking. In this article I&rsquo;ll try to take a rational approach at coding style. That means leaving the &ldquo;it looks ugly/better&rdquo; at the door.</p>

<!--more-->


<p>If at any point you feel like something &ldquo;just doesn&rsquo;t look good&rdquo;, breath in, breath out, and <strong>try it!</strong> Nothing beats hands-on experience, not even some random article on the internet :)</p>

<h2>Trailing commas?</h2>

<p>Should we use trailing commas or not? If you are not familiar with the practice, here is an array using trailing commas:</p>

<p><code>php
$flavors = [
   'chocolate',
   'vanilla',
];
</code></p>

<p>As you can see, the last item ends with a comma even though there is no extra item after it. It&rsquo;s perfectly valid PHP, the trailing comma is simply ignored. Now consider this example which is <strong>not</strong> using trailing commas:</p>

<p><code>php
$flavors = [
   'chocolate',
   'vanilla'
];
</code></p>

<p>Let&rsquo;s add a new value to the array:</p>

<p><code>php
$flavors = [
   'chocolate',
   'vanilla',
   'lemon'
];
</code></p>

<p>Here is the diff we generated in the commit:</p>

<p><code>diff
$flavors = [
   'chocolate',
-   'vanilla'
+   'vanilla',
+   'lemon'
];
</code></p>

<p>With trailing commas, the diff looks like this instead:</p>

<p><code>diff
$flavors = [
   'chocolate',
   'vanilla',
+   'lemon',
];
</code></p>

<p>As you can see, trailing commas lead to simpler and cleaner commits. This is also very useful when using <code>git blame</code>: each line points to the real commit that added it. Conclusion: <strong>use trailing commas</strong>.</p>

<p>It&rsquo;s interesting to note that there&rsquo;s currently a RFC to allow trailing commas everywhere in PHP (not just arrays). Obviously, I think it would be a great addition to the language for the reasons explained above, as well as for the sake of consistency.</p>

<h2>Value alignment?</h2>

<p>This practice is fairly common, though not universal. PSR-2 doesn&rsquo;t state anything about it, but many projects enforce such rule. Here is an example with phpdoc:</p>

<p><code>php
/**
 * @param int             $id       ID of the thing to export.
 * @param string          $filename Name of the file in which to export.
 * @param LoggerInterface $logger   Used to log the progress of the export.
 */
</code></p>

<p>And here is another one with arrays:</p>

<p><code>php
$formTypes = [
   'text'     =&gt; new TextField,
   'select'   =&gt; new SelectField,
   'checkbox' =&gt; new CheckboxField,
];
</code></p>

<p>Or for assignments:</p>

<p><code>php
$firstname = 'Spongebob';
$lastName  = 'Squarepants';
$age       = 25;
</code></p>

<p>Anyone who has ever modified such code knows: it&rsquo;s a pain. Sure it may &ldquo;look good&rdquo;, but when modifying that you have to fill in all the extra spaces to keep the alignment. One may argue that an IDE can re-arrange that for us, but even then let&rsquo;s look at the diff when adding a new item to an array:</p>

<p><code>diff
$formTypes = [
-   'text'     =&gt; new TextField,
-   'select'   =&gt; new SelectField,
-   'checkbox' =&gt; new CheckboxField,
+   'text'           =&gt; new TextField,
+   'select'         =&gt; new SelectField,
+   'checkbox'       =&gt; new CheckboxField,
+   'my_custom_type' =&gt; new CheckboxField,
];
</code></p>

<p>Now all the <code>git blame</code> information is lost and the commit is almost unreadable.</p>

<p>Alternatively, if you don&rsquo;t bother keeping the alignment:</p>

<p><code>php
$formTypes = [
   'text'     =&gt; new TextField,
   'select'   =&gt; new SelectField,
   'checkbox' =&gt; new CheckboxField,
   'my_custom_type' =&gt; new CheckboxField,
];
</code></p>

<p>The whole point of the alignement is lost, and there goes consistency.</p>

<p>Another example following an IDE refactoring (<code>LoggerInterface</code> was renamed to <code>Logger</code>):</p>

<p><code>php
/**
 * @param int             $id       ID of the thing to export.
 * @param string          $filename Name of the file in which to export.
 * @param Logger $logger   Used to log the progress of the export.
 */
</code></p>

<p>We have all seen that!</p>

<p>To sum up on aligning values:</p>

<ul>
<li>it requires extra work to maintain</li>
<li>it messes up diffs and <code>git blame</code></li>
<li>it leads to inconsistent alignment over time</li>
</ul>


<p>Conclusion: <strong>do not align things with spaces</strong>.</p>

<h2>Minimal phpdoc</h2>

<p>Using phpdoc to document classes, functions, methods, etc. is good practice. However code considered as &ldquo;well documented&rdquo; usually looks like this (<a href="https://github.com/symfony/symfony/blob/v2.7.6/src/Symfony/Bundle/FrameworkBundle/HttpCache/HttpCache.php#L31-L37">on GitHub</a>):</p>

<p><code>php
/**
 * Constructor.
 *
 * @param HttpKernelInterface $kernel An HttpKernelInterface instance
 * @param string $cacheDir The cache directory (default used if null)
 */
public function __construct(HttpKernelInterface $kernel, $cacheDir = null)
{ ... }
</code></p>

<p>There is much content in this docblock, but most of it is duplicated from what developers or tools can already get from the source:</p>

<ul>
<li>we get that it&rsquo;s a constructor, the method is <code>__construct()</code></li>
<li>we get that <code>$kernel</code> is a <code>HttpKernelInterface</code>, the parameter is type-hinted</li>
<li>we get that a <code>HttpKernelInterface</code> type-hint means that the parameter must be &ldquo;An HttpKernelInterface instance&rdquo; (this comment has no added value)</li>
</ul>


<p>In reality here is what the docblock provides that isn&rsquo;t provided by the code itself:</p>

<ul>
<li><code>$cacheDir</code> is a string (or null)</li>
<li>if <code>$cacheDir</code> is null, the default cache directory will be used</li>
</ul>


<p>The docblock could be reduced to this:</p>

<p><code>php
/**
 * @param string|null $cacheDir The cache directory (default used if null)
 */
public function __construct(HttpKernelInterface $kernel, $cacheDir = null)
{ ... }
</code></p>

<p>On top of being information overload, the duplication also becomes a problem when the code changes. Everbody has seen a docblock that doesn&rsquo;t match the method it describes. When information is duplicated this is much more likely to happen.</p>

<p>All of this is becoming even more interesting with PHP 7 (coming with scalar type-hints and return types). Here is <a href="https://github.com/symfony/symfony/blob/v2.7.6/src/Symfony/Component/HttpKernel/KernelInterface.php#L113-L118">another example</a> to illustrate that:</p>

<p>```php
interface KernelInterface
{</p>

<pre><code>...

/**
 * Gets the name of the kernel.
 *
 * @return string The kernel name
 */
public function getName();
</code></pre>

<p>}
```</p>

<p>With PHP 7 the docblock would become entirely useless:</p>

<p>```php
interface KernelInterface
{</p>

<pre><code>...

public function getName() : string;
</code></pre>

<p>}
```</p>

<p>Conclusion: <strong>use docblocks only to add information.</strong></p>

<h2>The &ldquo;Interface&rdquo; suffix</h2>

<p>This is a topic that has <a href="http://verraes.net/2013/09/sensible-interfaces/">already</a> <a href="http://phpixie.com/blog/naming-interfaces-in-php.html">been</a> <a href="https://groups.google.com/forum/#!topic/php-fig/aBUPKfTwyHo">debated</a> (the first link is the best by the way) so let&rsquo;s get right to the point: <strong>in most cases, there is no need to have <code>Interface</code> in the name of an interface</strong>.</p>

<p>Let&rsquo;s take that example:</p>

<p>```php
class Foo
{</p>

<pre><code>public function __construct(CacheInterface $cache)
{ ... }
</code></pre>

<p>}
```</p>

<p>One would argue here that the fact that we ask for an interface <em>explicitly</em> (it&rsquo;s visible through the name) is good: we know we ask for an interface. If the type-hint was for <code>Cache</code>, we wouldn&rsquo;t be sure whether we are asking for an interface or for an implementation.</p>

<p>My answer to that is that from the consumer&rsquo;s point of view, <strong>it doesn&rsquo;t matter if it&rsquo;s an interface or an implementation</strong>. What matters is that <code>Foo</code> needs a cache, end of story. There&rsquo;s a principle behind interfaces: either you have one implementation and you don&rsquo;t need an interface, either you have many implementations and you create an interface.</p>

<p>If for some reason there&rsquo;s only one implementation of the cache, then fine: just give me an instance of the class! If however there are multiples implementation of the cache, then <strong>each implementation exists for a specific reason</strong>. And that should be visible in the name. There is no reason there would be one implementation named <code>Cache</code>. There would be <code>RedisCache</code>, <code>FileCache</code>, <code>ArrayCache</code>, etc.</p>

<p>In the end, when we use the name <code>Cache</code> we either type-hint against the one implementation (no interface exists), or either against the interface. All is well!</p>

<p>I believe we have issues with this because :</p>

<ul>
<li>we are sometimes tempted to create interfaces when it&rsquo;s not needed, just because interfaces sound like bonus points towards clean code (thus leading to <code>Foo implements FooInterface</code>)</li>
<li>it requires coming up with unique names for implementations, and <a href="http://martinfowler.com/bliki/TwoHardThings.html">naming things is hard</a></li>
</ul>


<p>But even though this is challenging our habits, getting rid of <code>*Interface</code> forces us to think: better names and no unneeded interfaces.</p>

<p>For example if <code>UserRepository</code> is an interface, then you are forced to find a more specific name for your implementation. And you come up with <code>DoctrineUserRepository</code> and you realize that there could as well be <code>EloquentUserRepository</code>, <code>PdoUserRepository</code> or <code>InMemoryUserRepository</code>. <strong>Interfaces makes much more sense when they are the default</strong>. Implementations are secondary.</p>

<p>Let&rsquo;s keep in mind however that in some cases (for example in libraries/frameworks), interfaces are introduced only to allow a third party to replace the <em>default</em> implementation. We then have an interface with one implementation (other implementations are to be written by framework users). Given that context isn&rsquo;t the same as what was described above, it&rsquo;s harder to apply the same principles. In that case I can only advise to use critical thinking :)</p>

<h2>The &ldquo;Exception&rdquo; suffix</h2>

<p>What, again the suffixes? Yes!</p>

<p><em>this section is inspired from <a href="https://vimeo.com/album/2661665/video/74316116">Kevlin&rsquo;s mind-blowing talk</a></em></p>

<p>Here is where we use exceptions in PHP:</p>

<ul>
<li><code>throw ...</code></li>
<li><code>catch (...)</code></li>
<li><code>@throws</code> in phpdoc</li>
<li>when creating an exception class by extending another one</li>
</ul>


<p>That means that everywhere an exception class will appear, we will know it&rsquo;s an exception. Having the <code>Exception</code> suffix is then completely redundant.</p>

<p>Let&rsquo;s take an example: <code>UserNotFoundException</code>. The suffix brings absolutely no value. Even worse, it makes the (perfectly valid) sentence more obscure: <code>UserNotFound</code> is everything we need.</p>

<p>What&rsquo;s even more interesting is that, in some cases, removing the <code>Exception</code> suffix makes the name look quite bad. As an exercise, let&rsquo;s remove the suffix from <a href="https://github.com/symfony/symfony/tree/v2.7.6/src/Symfony/Component/Form/Exception">Symfony Form&rsquo;s exceptions</a>. By the way I&rsquo;m taking examples from Symfony not because I believe it is bad code, but on the contrary because it is a very good code base (thus making the point stronger).</p>

<p>First let&rsquo;s start with the exceptions that would make perfect sense without the suffix:</p>

<ul>
<li><code>BadMethodCall</code></li>
<li><code>InvalidArgument</code></li>
<li><code>InvalidConfiguration</code></li>
<li><code>OutOfBounds</code></li>
<li><code>TransformationFailed</code></li>
<li><code>UnexpectedType</code></li>
</ul>


<p>Those sound like perfectly valid english sentences that explain an error.</p>

<p>Now let&rsquo;s look at those that sound more like an information than an exception or error:</p>

<ul>
<li><code>AlreadyBound</code></li>
<li><code>AlreadySubmitted</code></li>
</ul>


<p>Imagine that situation in real life: you want to get on the bus, but the driver tells you &ldquo;no, somebody already got on&rdquo;. You would probably ask &ldquo;So what?&rdquo;. The driver&rsquo;s problem is maybe that the bus is full. It&rsquo;s the same here: maybe a form cannot be re-bound if it has already been bound.</p>

<p>How about <code>CannotRebind</code> and <code>CannotSubmitAgain</code> as exception names instead?</p>

<p>Lastly, let&rsquo;s look at the exceptions left:</p>

<ul>
<li><code>ErrorMappingException</code> (notice the combo error + exception)</li>
<li><code>LogicException</code>: exception/error in the logic</li>
<li><code>RuntimeException</code>: exception/error at runtime</li>
<li><code>StringCastException</code>: exception/error while casting to string?</li>
</ul>


<p>Except <code>RuntimeException</code> and <code>LogicException</code> which are very generic exceptions (maybe they deserve to be more specific?), here are suggestions for the other two:</p>

<ul>
<li><code>InvalidMapping</code></li>
<li><code>CannotBeCastToString</code></li>
</ul>


<p>Not convinced? Have a look at your own code and do the same exercise, it might give you a new persepective on your errors.</p>

<p>Conclusion: <strong>the <code>Exception</code> suffix is unnecessary</strong>. Not using it also has the benefit of forcing us to come up with names that better describe an actual error.</p>

<h2>Conclusion</h2>

<p>In the end we only had a look at 5 actual examples, but I want to stress that the main point of this article is:</p>

<ul>
<li>it&rsquo;s possible to think about coding style logically</li>
<li>sometimes doing so forces us to challenge our habits</li>
<li>when unsure or dubious: just try</li>
</ul>


<p>If you need to vent off on how some of this is stupid and ugly, there&rsquo;s a comment box below. I would also be happy to hear about practices you tried and you liked!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decoupling packages]]></title>
    <link href="http://mnapoli.fr/decoupling-packages/"/>
    <updated>2014-09-21T23:00:00+02:00</updated>
    <id>http://mnapoli.fr/decoupling-packages</id>
    <content type="html"><![CDATA[<p>Decoupling packages is a hard thing. There are not a lot of options, and this blog post is about how some options are better than others.</p>

<p>Let&rsquo;s say for example that you are writing a &ldquo;package&rdquo;, or library, to respond to HTTP requests (that kind of package could be considered the basis for a web framework). How do you handle routing?</p>

<p>If you write your Router package as an independent package (which is good: small and specialized packages are more reusable and maintainable), you might not want to couple the HTTP package to the Router package: you want to leave users free to choose the router of their choice.</p>

<p>So, what are your options to make the HTTP package and the Router package decoupled from each other?</p>

<!--more-->


<h2>Events</h2>

<p>The first option is to turn to <strong>event-driven programming</strong>. By relying on an &ldquo;event manager&rdquo; library/package, you can have your package raise specific events at strategic points in your code. And you can have those events affect the code flow.</p>

<p>This is the solution chosen by Symfony to solve the routing problem exposed earlier. Their HttpKernel component is decoupled form their Routing component through events.</p>

<p>Here is the simplified code flow of their <code>HttpKernel</code> class/component (which is the basis for an HTTP application):</p>

<p>```php
$eventDispatcher->dispatch(</p>

<pre><code>KernelEvents::REQUEST,
new GetResponseEvent($this, $request, $type)
</code></pre>

<p>);</p>

<p>$controller = $request->attributes->get(&lsquo;_controller&rsquo;);</p>

<p>if (! $controller) {</p>

<pre><code>throw new NotFoundHttpException();
</code></pre>

<p>}
```</p>

<p>So here is what&rsquo;s happening:</p>

<ul>
<li>the <code>HttpKernel</code> raises a &ldquo;Kernel Request&rdquo; event</li>
<li>then <strong>it expects</strong> that a listener set the controller under the &ldquo;_controller&rdquo; key in the request</li>
</ul>


<p>So is <code>HttpKernel</code> decoupled from the <code>Router</code> component? <strong>Yes</strong>. The listener that sets the controller could actually be anything.</p>

<p>The problem is, as emphasized above, that the <code>HttpKernel</code> <strong>expects something very specific from the listeners</strong>. The whole application depends on an unknown listener being actually registered for that particular event and following an exact, <strong>unspecified</strong> behavior.</p>

<p>I believe events should be used for hooking up in the main logic flow to <em>extend it</em>. <strong>But the main logic flow should be linear and not rely on the possible <em>side effects</em> of an event.</strong></p>

<p>There are some other problems we can find with this solution:</p>

<ul>
<li>the package ends up coupled to the &ldquo;event manager&rdquo; package (you just replaced a dependency by another)</li>
<li>the code is not linear: it makes it much harder for developers to put the pieces back together and contribute to the project</li>
<li>behavior from decoupled packages <strong>are not specified by contracts</strong></li>
</ul>


<p>Regarding the pros:</p>

<ul>
<li>the behavior is <em>not specified</em>, which can also be a good thing: it leaves every possible option open for the future</li>
<li>might be simpler than the other options</li>
</ul>


<p><code>&lt;disclaimer&gt;</code>Just to be clear, Symfony is an exceptional framework and I love it. I am sure the decision to choose this option was carefully thought through, and the important thing to remember is that <strong>it works</strong>. Symfony is probably the most popular modern PHP framework, and my blog post doesn&rsquo;t change that. I am just using it as an example here, I just want to expose alternative options and discuss the pros and cons.<code>&lt;/disclaimer&gt;</code></p>

<h2>Interfaces and adapters</h2>

<p>I was mentioning <em>specifying behaviors</em> with <strong>contracts</strong>. In PHP (and most OO languages), you can implement this using <strong>interfaces</strong>.</p>

<p>If we take the previous example, an HTTP package could contain a <code>RouterInterface</code> to specify how a routing component should behave (this is a very basic example):</p>

<p>```php
namespace Acme\Http;</p>

<p>interface RouterInterface {</p>

<pre><code>/**
 * @return callable The controller to use for this request
 */
public function route(Request $request);
</code></pre>

<p>}
```</p>

<p>You&rsquo;ll notice that not everything is specifiable, e.g. the return types. Hopefully PHP will allow that in its next major version, but until then the only solution is to use documentation.</p>

<p>In the <code>HttpApplication</code> class, we can use it in type-hints to accept any implementation (classic dependency injection here). And here is what the code logic would look like:</p>

<p>```php
$controller = $router->route($request);</p>

<p>if (! $controller) {</p>

<pre><code>throw new NotFoundHttpException();
</code></pre>

<p>}
```</p>

<p><strong>The code flow is linear and completely explicit.</strong> And the HTTP package is decoupled from any Router package!</p>

<p>The only problem left: Router packages would be forced to implement <code>Acme\Http\RouterInterface</code> if they want to be used with the HTTP package. Because of that, they end up coupled to it… So how do we decouple Router packages from the HTTP package?</p>

<p>A way to go around that is to use <strong>adapters</strong>:</p>

<p>```php
namespace \MyApplication\Adapter;</p>

<p>class HttpRouterInterfaceAdapter implements \Acme\Http\RouterInterface {</p>

<pre><code>private $router;

public function __construct(\Acme\Router\Router $router) {
    $this-&gt;router = $router;
}

public function route(Request $request) {
      $this-&gt;router-&gt;route($request);
}
</code></pre>

<p>}
```</p>

<p>Thanks to that adapter, the <code>Router</code> class doesn&rsquo;t need to implement the <code>RouterInterface</code>. So it is completely decoupled from the HTTP package.</p>

<p>However, as you can see, it requires writing an adapter each time you want to &ldquo;connect&rdquo; decoupled packages.</p>

<p>Pros:</p>

<ul>
<li>linear and explicit code flow</li>
<li>specified behavior (using interfaces)</li>
</ul>


<p>Cons:</p>

<ul>
<li>requires to write interfaces</li>
<li>requires to write adapters</li>
</ul>


<p>This strategy of interfaces was recently used by <strong>Laravel</strong>. For the version 5.0 (IIRC), Laravel will publish a package named <a href="https://github.com/illuminate/contracts"><code>illuminate/contracts</code></a> which contains all the interfaces used by its other packages.</p>

<p>That allows to have decoupled Laravel packages while not needing adapters to use them together: packages can implement the interfaces at the very small cost of being coupled to <code>illuminate/contracts</code> (it&rsquo;s a small cost because the package is very light and contains only interfaces).</p>

<h2>Standardized interfaces</h2>

<p>Now the last option is to go a step beyond and try to make the interfaces &ldquo;<strong>standard</strong>&rdquo;. By that I mean that the same interface would be used by many packages, and implemented by many others.</p>

<p>The good example for this is obviously <strong>logging</strong>. There used to be a numerous amount of different logger libraries for PHP. Then the <a href="http://www.php-fig.org/">PHP-FIG</a> group worked to produce <a href="https://github.com/php-fig/log">PSR-3</a>, the logger standard.</p>

<p>Today, many logging packages implement the <code>Psr\Log\LoggerInterface</code>, and most modern frameworks type-hint against that interface instead of specific implementations. That means that users can choose any PSR-3 compliant logger and have their framework use it.</p>

<p>Needless to say that this is an ideal situation: <strong>no coupling, no effort</strong>! But logging was kind of an easy topic. It&rsquo;s very hard to come up with standards for all the other components that need interfaces, mainly because implementations often differ a lot.</p>

<p>The <a href="http://www.php-fig.org/">PHP-FIG</a> has been working for a few years on a Cache and an HTTP message PSR, and hopefully they will be released sometime. In the meantime, the <a href="https://github.com/container-interop/container-interop">container-interop project</a> aims at providing interfaces to standardize the usage of dependency injection containers.</p>

<h2>Conclusion</h2>

<p>OK, there&rsquo;s not much left to add here, if you have any reaction about this I&rsquo;d be happy to hear it. If I got anything wrong, I&rsquo;d be happy to correct it.</p>

<p>I would like to finish on an idea that was suggested about a year ago on the PHP internals mailing list: &ldquo;<strong>weak interfaces</strong>&rdquo;. Those are interfaces that define a behavior, but <strong>that do not need to be implemented by classes</strong>. It mixes the principle of static-typing with duck-typing:</p>

<blockquote><p>If it looks like a duck and quacks like a duck, then it&rsquo;s a duck.</p></blockquote>

<p>What&rsquo;s really good with this is that it allows packages to define their interfaces, and type-hint against it, all the while not requiring dependencies to actually implement it. As long as objects are compatible with the interface, it works. It&rsquo;s a sort of <code>class X implements Y</code> evaluated at runtime. Example:</p>

<p>```php
interface FooInterface {</p>

<pre><code>public function hello();
</code></pre>

<p>}</p>

<p>// Foo does not implement FooInterface
class Foo {</p>

<pre><code>// But this method makes it compatible with FooInterface
public function hello()
{
    return 'Hello world';
}
</code></pre>

<p>}</p>

<p>// That pseudo-syntax tells that this is a weak-interface type-hinting
function run(&lt;<FooInterface>> $foo) {</p>

<pre><code>echo $foo;
</code></pre>

<p>}</p>

<p>// It works because Foo is compatible with the interface
run(new Foo);</p>

<p>// Error, stdClass is not compatible with FooInterface
run(new stdClass);
```</p>

<p>This example was just for fun, but I wish such a feature would land in PHP (along with static return type). It would help a lot with package interoperability and decoupling.</p>

<p><strong>Update:</strong> the original RFC about what I called <em>weak interfaces</em> has been linked to me by its author, Anthony Ferrara. Here it is: <a href="https://wiki.php.net/rfc/protocol_type_hinting">PHP RFC: Structural Type Hinting</a>. As you can see, it was named <em>Structural type hinting</em> instead of <em>weak interface</em>.</p>

<p>It has also been pointed to me in the comments that the same Anthony Ferrara wrote a userland implementation of this: <a href="https://github.com/ircmaxell/Protocol-Lib">ProtocolLib</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should you really write ugly code? Spoiler: no]]></title>
    <link href="http://mnapoli.fr/should-you-really-write-ugly-code-no/"/>
    <updated>2013-06-09T20:00:00+02:00</updated>
    <id>http://mnapoli.fr/should-you-really-write-ugly-code-no</id>
    <content type="html"><![CDATA[<p>I recently stumbled upon François Zaninotto’s blog post: <a href="http://redotheweb.com/2013/06/04/you-should-write-ugly-code.html">You should write ugly code</a>. While he makes several good points, I strongly disagree with him and I feel the urge to give my opinion on the matter (what did you expect, this is a blog).</p>

<p>The point that he makes is that he encourages developers to write “ugly code”, i.e. code that works and that doesn’t follow best practices or anything related to code quality.</p>

<blockquote><p>[..] developers shouldn’t care about code beauty, because that’s not their job. Instead, they should focus on creating great products, which is infinitely more satisfying.</p></blockquote>

<p>Later, he insists that by writing ugly code, we ship faster than if we had to worry and handle code quality. And shipping faster is good for the business.</p>

<p>Well that’s true. That’s called <strong>Technical Debt</strong>. And like any debt, you’ll have to repay later.</p>

<p><img src="/images/posts/technical-debt.png" width="400"></p>

<!-- more -->


<p><em>Technical debt diagram, borrowed from Planet Geek for the (awesome) “<a href="http://www.planetgeek.ch/2013/06/05/clean-code-cheat-sheet/">Clean Code cheat sheet</a>“.</em></p>

<p>Payback is a bitch and future-you will be cursing present-you for writing ugly code. The cost of change is directly affected, and when you tell your boss that Feature B will takes 2 weeks, he will point out that Feature A took only 2 days.</p>

<p>I won’t get radical as well and say that you should alway write “beautiful code”. What I advocate for is to carefully choose your side.</p>

<p>You need to get a prototype working for a demo? Then get it done quick and dirty! Heck I even used <a href="http://php.net/manual/fr/function.mysql-query.php">mysql_query</a> on an internal website once, and it worked. I know that this website will never need any real maintenance, so I can sleep without fearing for <a href="http://www.codinghorror.com/blog/2008/06/coding-for-violent-psychopaths.html">violent psychopaths</a>.</p>

<p>But if you plan on writing software that will be maintained for a few years, you would definitely earn by writing beautiful code. Code quality earns you money, and that’s something difficult for managers to get (especially if they have never developed, or never seen code quality benefits before). I once took part on the rewrite of a whole application. After the rewrite, the manager was completely amazed that we needed only a few days to do what would systematically take a month or two before.</p>

<p>I’d like to finish on his take about “<em>coding trends</em>” and what he calls “<em>trend setters</em>” like Eric Evans with his <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>. DDD is not a trend, it is a set of patterns and methods to help you in specific situations. <a href="http://www.amazon.com/dp/0321125215/ref=cm_sw_su_dp">Evans book</a> is very clear about it: DDD can be unhelpful if you try to use it everywhere. That is very reductive to say that all these kind of people (Evans, Martin Fowler, Jeff Atwood) do is “<em>to explain why pattern A is better than pattern B. Until someone else publishes a book, explaining that pattern C is much, much better.</em>”</p>

<p>Thanks to these guys, and best practices in general, I make my company earn money with apps that don’t need to be rewritten every year. I can work on my colleague’s code without pulling my hair and wishing him a painful death. I can participate to Open Source projects because I can understand the code.</p>

<p><strong>TL;DR</strong></p>

<ul>
<li>Go quick and dirty, but expect troubles on the long run</li>
<li>Care about quality, that will slow you down but get you farther</li>
</ul>


<p>Both are valid options, but choose carefully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be a better programmer: take a step back]]></title>
    <link href="http://mnapoli.fr/be-a-better-programmer-take-a-step-back/"/>
    <updated>2013-02-04T20:00:00+01:00</updated>
    <id>http://mnapoli.fr/be-a-better-programmer-take-a-step-back</id>
    <content type="html"><![CDATA[<p><em>Replace [client] by [boss] or anything of the kind if you prefer.</em></p>

<h2>A day at work</h2>

<blockquote><p><strong>Bug #3890 from Client</strong></p>

<p>There is an application crash, it says “division by zero error in SpeedCalculator::compute()”.</p>

<p>Please fix ASAP!</p></blockquote>

<!-- more -->


<p>You open <code>SpeedCalculator.php</code> to find:</p>

<p>```php
public function compute() {</p>

<pre><code>return $this-&gt;distance / $this-&gt;time;
</code></pre>

<p>}
```</p>

<h2>Fixing the bug</h2>

<p>Easy! Who wrote that code anyway, how could he not think of that!</p>

<p>```php
public function compute() {</p>

<pre><code>if ($this-&gt;time == 0) {
    return 0;
}
return $this-&gt;distance / $this-&gt;time;
</code></pre>

<p>}
```</p>

<p>There you go, the bug is fixed in 2 minutes.</p>

<p>Later, the same bug is found in <code>RatioCalculator</code> and <code>MoneyCalculator</code>, but once these are fixed too, everyone in the team is sure the problem won’t appear anywhere, it’s gone, for sure this time! The code is rock solid now!</p>

<p>A month later, another bug pops in. The application does not crash anymore, but the client happens to see wrong calculation results in his reports because of the <code>return 0;</code>.</p>

<h2>Take a step back</h2>

<p>What if, instead of rushing, we took a step back.</p>

<blockquote><p>Why did this situation happen?</p>

<p><code>$this-&gt;time</code> was set to 0.</p></blockquote>

<p>Easy! Let’s prevent that.</p>

<p>```php
public function setTime($time) {</p>

<pre><code>if ($time == 0) {
    throw new InvalidArgumentException("Invalid value");
}
$this-&gt;time = $time;
</code></pre>

<p>}
```</p>

<p>Now this is better, you guarantee the integrity of the data. But the client is not very happy! When he fills the form with a time of 0, the application shows an error page.</p>

<p>So you work on displaying a nice error message by catching the exception in the controller.</p>

<p>When you’re done, you realize you also got the same thing to do for RatioCalculator and MoneyCalculator, so you copy paste and you are good to go.</p>

<p>Wait a minute, the client prefers that the error message is displayed in orange rather than red. So you change the color and copy-paste the code again.</p>

<h2>Take another step back</h2>

<p><strong>What if, instead of fixing a bug, you answered a need?</strong></p>

<p>Why did the client put 0 in the form? Because he made a mistake.</p>

<p>What is needed here?</p>

<ul>
<li>Is it <strong>only</strong> making sure the time that the user inputs in “speedCalculationForm” is ≠ 0?</li>
<li>Is it <strong>only</strong> making sure the “speedCalculationForm” contains valid data?</li>
<li><strong>Or is it validating all user inputs?</strong></li>
</ul>


<p>So what about a validation library for example?</p>

<p>Waaaaait! Don’t go and write one yourself! For the love of god, take a step back, breathe, and look at what already exists.</p>

<h2>Needs</h2>

<p>We, programmers, love being technical. When your client or your boss thinks out loud about what he wants, we can’t help but imagine how we could implement it.</p>

<p>But we need be able to take a step back. If we want to be really good in our jobs, <strong>we have to understand the needs before thinking about solutions</strong>. And that takes a lot of effort.</p>

<p>Does the client really need “a blinking button that moves away when you try to click on it?” or does he need something else, something that he doesn’t know about and that you could help him define? And the same goes for yourself! Do you really need to open a file and write some infos in there, or do you simply need a logging system?</p>

<p>Take a step back, try and see the big picture. Because one may be a very good programmer, but code’s purpose is to answer a need.</p>

<p>Not a <em>&ldquo;fix the bugs in the bug tracker&rdquo;</em> kind of need, but rather a <em>&ldquo;I want an application will help me calculate speed based on input data, and if I type in invalid data then for fuck’s sake just tell me don’t go and calculate some weird results&rdquo;</em>.</p>
]]></content>
  </entry>
  
</feed>
