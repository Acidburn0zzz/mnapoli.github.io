<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: composer | Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/categories/composer/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2015-04-12T12:59:31+12:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test against the lowest Composer dependencies on Travis]]></title>
    <link href="http://mnapoli.fr/test-lowest-dependencies/"/>
    <updated>2014-12-17T18:00:00+13:00</updated>
    <id>http://mnapoli.fr/test-lowest-dependencies</id>
    <content type="html"><![CDATA[<p>Composer just got a <a href="https://github.com/composer/composer/pull/3450">new awesome addition</a> thanks to <a href="https://twitter.com/nicolasgrekas">Nicolas Grekas</a>: prefer the lowest versions of your dependencies.</p>

<p><code>
composer update --prefer-lowest
</code></p>

<p>This amazing option will install the lowest versions possible for all your dependencies.</p>

<p>What for? <strong>Tests</strong> of course!</p>

<!--more-->


<h2>Update Composer</h2>

<p>OK before we get started, don&rsquo;t forget to update Composer right now if you want to use the new option:</p>

<p><code>
sudo composer self-update
</code></p>

<h2>Testing against lowest dependencies</h2>

<p>It might not make a lot of sense to test an <strong>application</strong> against its lowest dependencies, because unless something is done wrong it will be installed with controlled versions.</p>

<p>However, for <strong>libraries</strong> (or <em>components</em>…) it&rsquo;s a very good thing.</p>

<p>To give you an example, I wanted to give it a try and ran <code>composer update --prefer-lowest</code> in <a href="http://php-di.org">PHP-DI</a>&rsquo;s directory: all hell broke loose… PHPUnit wouldn&rsquo;t even start.</p>

<p>The reason for this were multiples, but they all boiled down to:</p>

<ul>
<li>I used a feature that didn&rsquo;t yet exist in version X of dependency Y</li>
<li>or dependency Y had a bug in version X</li>
</ul>


<p><strong>and I allowed installing that problematic version X in <code>composer.json</code></strong>.</p>

<p>In the end, I was distributing a library that <em>could</em> not work at all (if people had insane version constraints).</p>

<h2>Setting up tests on Travis</h2>

<p>Let&rsquo;s be proactive and use continuous integration to prevent that from happening again.</p>

<p>Here is an example of a <code>.travis.yml</code> configuration that would run the tests using the lowest dependencies with PHP 5.3.3:</p>

<p>```yml
language: php</p>

<p>php:
  &ndash; 5.3.3
  &ndash; 5.3
  &ndash; 5.4
  &ndash; 5.5
  &ndash; 5.6
  &ndash; hhvm</p>

<p>matrix:
  include:</p>

<pre><code>- php: 5.3.3
  env: dependencies=lowest
</code></pre>

<p>before_script:
  &ndash; composer self-update
  &ndash; composer install -n
  &ndash; if [ &ldquo;$dependencies&rdquo; = &ldquo;lowest&rdquo; ]; then composer update &mdash;prefer-lowest &mdash;prefer-stable -n; fi;</p>

<p>script:
  &ndash; phpunit
```</p>

<p>You&rsquo;ll notice that we have to run <code>composer self-update</code> because Travis hasn&rsquo;t picked up the latest Composer version yet.</p>

<p>Here was the result on Travis:</p>

<p><img src="/images/posts/composer-lowest-dependencies.png"></p>

<p>A new job was added to the build matrix, and this job ran on PHP 5.3.3 with the lowest dependency versions.</p>

<p>If you are interested, have a look at <a href="https://github.com/mnapoli/PHP-DI/pull/219">the pull request</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running composer install when you switch branch]]></title>
    <link href="http://mnapoli.fr/run-composer-install-when-you-switch-branch/"/>
    <updated>2013-09-09T17:03:00+12:00</updated>
    <id>http://mnapoli.fr/run-composer-install-when-you-switch-branch</id>
    <content type="html"><![CDATA[<p>When working with <a href="http://getcomposer.org/">Composer</a> and git branches, you will end up either:</p>

<ul>
<li>reinstalling dependencies each time you switch branch</li>
<li>or meeting weird bugs because you didn&rsquo;t</li>
</ul>


<p>because <code>composer.json</code> may have changed between branches.</p>

<p>To have composer automatically re-install dependencies when you switch to a branch, simply create a <code>.git/hooks/post-checkout</code> file in your project repository:</p>

<p>```sh</p>

<h1>!/bin/sh</h1>

<p>cd $GIT_DIR/..</p>

<p>composer install
```</p>

<p>This is a git post-checkout hook (as the name suggest)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overriding dependencies with Composer]]></title>
    <link href="http://mnapoli.fr/overriding-dependencies-with-composer/"/>
    <updated>2013-04-16T20:00:00+12:00</updated>
    <id>http://mnapoli.fr/overriding-dependencies-with-composer</id>
    <content type="html"><![CDATA[<p>At my company, <strong>My C-Sense</strong>, we use Doctrine amongst other PHP frameworks and libraries. When we find bugs (or need new features), we contribute to the project through our <a href="https://github.com/myclabs">open source initiative</a>.</p>

<p>The problem is when we submit a pull request on Github, several months usually happen until our fix appears in a stable release.</p>

<p>To be able to enjoy our bugfixes immediately, here is our workflow:</p>

<ul>
<li>We fork the repository of the project to <a href="https://github.com/myclabs">our organization account</a></li>
<li>We commit and publish the bugfix in a branch of our repository</li>
<li>We submit a Pull Request</li>
<li>We override the dependency to the project with our version in Composer</li>
</ul>


<p>Overriding a dependency <a href="http://getcomposer.org/doc/04-schema.md#repositories">is quite simple</a>: just add your git repository in your <code>composer.json</code> and require you branch.</p>

<p>But when we want to override, for example, <code>doctrine/common</code> which is used by <code>doctrine/orm</code>, then we have a problem: <code>doctrine/orm</code> wants a stable version of <code>doctrine/common</code>, it will conflict with your requirement to a dev branch.</p>

<p>The solution is to <strong>alias your dev branch to a stable release</strong>, and that is possible through the awesome “<a href="http://getcomposer.org/doc/articles/aliases.md#require-inline-alias">inline alias</a>” functionality in Composer.</p>

<!-- more -->


<p>Here is an example:</p>

<p>```json
{</p>

<pre><code>"require": {
    "doctrine/orm": "2.3.*",
    "doctrine/common": "dev-ChainDriverFix as 2.3.0"
},
"repositories": [
    {
        "type": "git",
        "url": "https://github.com/myclabs/common.git"
    }
]
</code></pre>

<p>}
```</p>

<p>Here, our branch <code>ChainDriverFix</code> will override the 2.3.0 version of <code>doctrine/common</code>, which will also be compatible with <code>doctrine/orm</code>!</p>
]]></content>
  </entry>
  
</feed>
