<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matthieu Napoli]]></title>
  <link href="http://mnapoli.fr/atom.xml" rel="self"/>
  <link href="http://mnapoli.fr/"/>
  <updated>2014-11-24T21:54:44+13:00</updated>
  <id>http://mnapoli.fr/</id>
  <author>
    <name><![CDATA[Matthieu Napoli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Decoupling packages]]></title>
    <link href="http://mnapoli.fr/decoupling-packages/"/>
    <updated>2014-09-21T23:00:00+12:00</updated>
    <id>http://mnapoli.fr/decoupling-packages</id>
    <content type="html"><![CDATA[<p>Decoupling packages is a hard thing. There are not a lot of options, and this blog post is about how some options are better than others.</p>

<p>Let&rsquo;s say for example that you are writing a &ldquo;package&rdquo;, or library, to respond to HTTP requests (that kind of package could be considered the basis for a web framework). How do you handle routing?</p>

<p>If you write your Router package as an independent package (which is good: small and specialized packages are more reusable and maintainable), you might not want to couple the HTTP package to the Router package: you want to leave users free to choose the router of their choice.</p>

<p>So, what are your options to make the HTTP package and the Router package decoupled from each other?</p>

<!--more-->


<h2>Events</h2>

<p>The first option is to turn to <strong>event-driven programming</strong>. By relying on an &ldquo;event manager&rdquo; library/package, you can have your package raise specific events at strategic points in your code. And you can have those events affect the code flow.</p>

<p>This is the solution chosen by Symfony to solve the routing problem exposed earlier. Their HttpKernel component is decoupled form their Routing component through events.</p>

<p>Here is the simplified code flow of their <code>HttpKernel</code> class/component (which is the basis for an HTTP application):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$eventDispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">KernelEvents</span><span class="o">::</span><span class="na">REQUEST</span><span class="p">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">GetResponseEvent</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$type</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;_controller&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">NotFoundHttpException</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here is what&rsquo;s happening:</p>

<ul>
<li>the <code>HttpKernel</code> raises a &ldquo;Kernel Request&rdquo; event</li>
<li>then <strong>it expects</strong> that a listener set the controller under the &ldquo;_controller&rdquo; key in the request</li>
</ul>


<p>So is <code>HttpKernel</code> decoupled from the <code>Router</code> component? <strong>Yes</strong>. The listener that sets the controller could actually be anything.</p>

<p>The problem is, as emphasized above, that the <code>HttpKernel</code> <strong>expects something very specific from the listeners</strong>. The whole application depends on an unknown listener being actually registered for that particular event and following an exact, <strong>unspecified</strong> behavior.</p>

<p>I believe events should be used for hooking up in the main logic flow to <em>extend it</em>. <strong>But the main logic flow should be linear and not rely on the possible <em>side effects</em> of an event.</strong></p>

<p>There are some other problems we can find with this solution:</p>

<ul>
<li>the package ends up coupled to the &ldquo;event manager&rdquo; package (you just replaced a dependency by another)</li>
<li>the code is not linear: it makes it much harder for developers to put the pieces back together and contribute to the project</li>
<li>behavior from decoupled packages <strong>are not specified by contracts</strong></li>
</ul>


<p>Regarding the pros:</p>

<ul>
<li>the behavior is <em>not specified</em>, which can also be a good thing: it leaves every possible option open for the future</li>
<li>might be simpler than the other options</li>
</ul>


<p><code>&lt;disclaimer&gt;</code>Just to be clear, Symfony is an exceptional framework and I love it. I am sure the decision to choose this option was carefully thought through, and the important thing to remember is that <strong>it works</strong>. Symfony is probably the most popular modern PHP framework, and my blog post doesn&rsquo;t change that. I am just using it as an example here, I just want to expose alternative options and discuss the pros and cons.<code>&lt;/disclaimer&gt;</code></p>

<h2>Interfaces and adapters</h2>

<p>I was mentioning <em>specifying behaviors</em> with <strong>contracts</strong>. In PHP (and most OO languages), you can implement this using <strong>interfaces</strong>.</p>

<p>If we take the previous example, an HTTP package could contain a <code>RouterInterface</code> to specify how a routing component should behave (this is a very basic example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">Acme\Http</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="nx">RouterInterface</span> <span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return callable The controller to use for this request</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">route</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that not everything is specifiable, e.g. the return types. Hopefully PHP will allow that in its next major version, but until then the only solution is to use documentation.</p>

<p>In the <code>HttpApplication</code> class, we can use it in type-hints to accept any implementation (classic dependency injection here). And here is what the code logic would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$router</span><span class="o">-&gt;</span><span class="na">route</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">NotFoundHttpException</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The code flow is linear and completely explicit.</strong> And the HTTP package is decoupled from any Router package!</p>

<p>The only problem left: Router packages would be forced to implement <code>Acme\Http\RouterInterface</code> if they want to be used with the HTTP package. Because of that, they end up coupled to it… So how do we decouple Router packages from the HTTP package?</p>

<p>A way to go around that is to use <strong>adapters</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">namespace</span> <span class="nx">\MyApplication\Adapter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HttpRouterInterfaceAdapter</span> <span class="k">implements</span> <span class="nx">\Acme\Http\RouterInterface</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$router</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\Acme\Router\Router</span> <span class="nv">$router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span> <span class="o">=</span> <span class="nv">$router</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">route</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">route</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to that adapter, the <code>Router</code> class doesn&rsquo;t need to implement the <code>RouterInterface</code>. So it is completely decoupled from the HTTP package.</p>

<p>However, as you can see, it requires writing an adapter each time you want to &ldquo;connect&rdquo; decoupled packages.</p>

<p>Pros:</p>

<ul>
<li>linear and explicit code flow</li>
<li>specified behavior (using interfaces)</li>
</ul>


<p>Cons:</p>

<ul>
<li>requires to write interfaces</li>
<li>requires to write adapters</li>
</ul>


<p>This strategy of interfaces was recently used by <strong>Laravel</strong>. For the version 5.0 (IIRC), Laravel will publish a package named <a href="https://github.com/illuminate/contracts"><code>illuminate/contracts</code></a> which contains all the interfaces used by its other packages.</p>

<p>That allows to have decoupled Laravel packages while not needing adapters to use them together: packages can implement the interfaces at the very small cost of being coupled to <code>illuminate/contracts</code> (it&rsquo;s a small cost because the package is very light and contains only interfaces).</p>

<h2>Standardized interfaces</h2>

<p>Now the last option is to go a step beyond and try to make the interfaces &ldquo;<strong>standard</strong>&rdquo;. By that I mean that the same interface would be used by many packages, and implemented by many others.</p>

<p>The good example for this is obviously <strong>logging</strong>. There used to be a numerous amount of different logger libraries for PHP. Then the <a href="http://www.php-fig.org/">PHP-FIG</a> group worked to produce <a href="https://github.com/php-fig/log">PSR-3</a>, the logger standard.</p>

<p>Today, many logging packages implement the <code>Psr\Log\LoggerInterface</code>, and most modern frameworks type-hint against that interface instead of specific implementations. That means that users can choose any PSR-3 compliant logger and have their framework use it.</p>

<p>Needless to say that this is an ideal situation: <strong>no coupling, no effort</strong>! But logging was kind of an easy topic. It&rsquo;s very hard to come up with standards for all the other components that need interfaces, mainly because implementations often differ a lot.</p>

<p>The <a href="http://www.php-fig.org/">PHP-FIG</a> has been working for a few years on a Cache and an HTTP message PSR, and hopefully they will be released sometime. In the meantime, the <a href="https://github.com/container-interop/container-interop">container-interop project</a> aims at providing interfaces to standardize the usage of dependency injection containers.</p>

<h2>Conclusion</h2>

<p>OK, there&rsquo;s not much left to add here, if you have any reaction about this I&rsquo;d be happy to hear it. If I got anything wrong, I&rsquo;d be happy to correct it.</p>

<p>I would like to finish on an idea that was suggested about a year ago on the PHP internals mailing list: &ldquo;<strong>weak interfaces</strong>&rdquo;. Those are interfaces that define a behavior, but <strong>that do not need to be implemented by classes</strong>. It mixes the principle of static-typing with duck-typing:</p>

<blockquote><p>If it looks like a duck and quacks like a duck, then it&rsquo;s a duck.</p></blockquote>

<p>What&rsquo;s really good with this is that it allows packages to define their interfaces, and type-hint against it, all the while not requiring dependencies to actually implement it. As long as objects are compatible with the interface, it works. It&rsquo;s a sort of <code>class X implements Y</code> evaluated at runtime. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">FooInterface</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">hello</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Foo does not implement FooInterface</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// But this method makes it compatible with FooInterface</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">hello</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;Hello world&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// That pseudo-syntax tells that this is a weak-interface type-hinting</span>
</span><span class='line'><span class="k">function</span> <span class="nf">run</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="nx">FooInterface</span><span class="o">&gt;&gt;</span> <span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// It works because Foo is compatible with the interface</span>
</span><span class='line'><span class="nx">run</span><span class="p">(</span><span class="k">new</span> <span class="nx">Foo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Error, stdClass is not compatible with FooInterface</span>
</span><span class='line'><span class="nx">run</span><span class="p">(</span><span class="k">new</span> <span class="k">stdClass</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example was just for fun, but I wish such a feature would land in PHP (along with static return type). It would help a lot with package interoperability and decoupling.</p>

<p><strong>Update:</strong> the original RFC about what I called <em>weak interfaces</em> has been linked to me by its author, Anthony Ferrara. Here it is: <a href="https://wiki.php.net/rfc/protocol_type_hinting">PHP RFC: Structural Type Hinting</a>. As you can see, it was named <em>Structural type hinting</em> instead of <em>weak interface</em>.</p>

<p>It has also been pointed to me in the comments that the same Anthony Ferrara wrote a userland implementation of this: <a href="https://github.com/ircmaxell/Protocol-Lib">ProtocolLib</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A retrospective on open sourcing projects at My C-Sense]]></title>
    <link href="http://mnapoli.fr/retrospective-mycsense-open-source/"/>
    <updated>2014-07-01T18:00:00+12:00</updated>
    <id>http://mnapoli.fr/retrospective-mycsense-open-source</id>
    <content type="html"><![CDATA[<p>Today is my last day at <a href="http://www.myc-sense.com"><strong>My C-Sense</strong></a>, after almost 2 years working on creating and modernizing existing PHP applications. This has been an incredibly rich experience in an excellent work environment, I will surely miss this job and my colleagues.</p>

<p>Now is probably a good time to look back on our open source experience as a company, and as a developer. It all started when we moved all of our code to GitHub: we used a lot of open source software and libraries, and we thought we might try to contribute some day with some small internal projects too.</p>

<p>So that&rsquo;s how <a href="https://github.com/myclabs"><strong>MyCLabs</strong></a> was born: let&rsquo;s keep the door open for open source because &ldquo;why not&rdquo;.</p>

<!-- more -->


<h2>jquery.confirm</h2>

<p>The first project was born out of a simple need: a confirmation box on some buttons and links. We were using Bootstrap, but adding all the JS and HTML needed for such a simple thing was definitely worth a JS function. So instead of a quick and dirty solution, I turned to jQuery and learned how plugins worked, just for fun and because it wasn&rsquo;t a big investment. In no time, <a href="https://github.com/myclabs/jquery.confirm"><strong>jquery.confirm</strong></a> was born (the <a href="http://myclabs.github.io/jquery.confirm">demo is here</a>).</p>

<p>The project was absolutely not ambitious, yet it&rsquo;s probably our most successful project yet. It has <em>30 forks</em>, received 10 pull requests and has 13 releases. That&rsquo;s not much, but for a simple confirmation dialog, it&rsquo;s quite nice.</p>

<p>And what&rsquo;s interesting is that it&rsquo;s the perfect example of an open source &ldquo;success&rdquo; from the company&rsquo;s point of view: we receive much more contributions than we contribute to it ourselves. We get bugfixes &ldquo;for free&rdquo;, and we even got our migration to Bootstrap 3 covered for us <a href="https://github.com/myclabs/jquery.confirm/pull/10">by a contributor</a>. Which company wouldn&rsquo;t want that?</p>

<h2>PHP Enum</h2>

<p>The next project open sourced was a bit different. <a href="https://github.com/myclabs/php-enum"><strong>PHP Enum</strong></a> is an implementation of an Enum structure for PHP. That&rsquo;s probably not the first time you hear about something like that, so here is why we created one:</p>

<ul>
<li><a href="http://php.net/manual/en/class.splenum.php">SplEnum</a> seems like a good solution, but it is actually a separate PHP extension that needs to be installed (which makes it useless IMO)</li>
<li>the other open source implementations were not good enough: either they were too far from SplEnum (which means most of the time they were working in a weird way), either they were a direct clone of SplEnum and there was a bit of room for improvement. If you do a search today, you&rsquo;ll find other good libraries that were different or non-existant at the time</li>
</ul>


<p>We ended up using it in some places in our application, and I ended up using it in <a href="http://php-di.org">PHP-DI</a>. We received a few contributions, but obviously there&rsquo;s not a lot of room for bugs or new features since it&rsquo;s very simple.</p>

<p>In the end, this library has been installed <em>more than 16 000 times</em>, which is definitely a lot and that makes us happy (PHP-DI installs might represent a good share of that).</p>

<h2>MyCLabs\ACL</h2>

<p><a href="http://myclabs.github.io/ACL/"><strong>MyCLabs\ACL</strong></a> is the one I&rsquo;m the most proud of. We have been working on <em>the ACL problem</em> and <strong>access control</strong> for more than 4 years (I&rsquo;ve been on and off at My C-Sense), changing, improving and rewriting our solution about every year. It has been a major headache, especially since it&rsquo;s a problem that leaks everywhere: in the model, at the database level, at the routing level, in the views, … And its impact on performance was definitely one of the biggest challenge.</p>

<p>We were always looking at all the existing PHP solutions, but none of them was ever <em>even close</em> to fit our need. We&rsquo;ve always been amazed about this, because we are sure many other companies have the same needs as us.</p>

<p>So because of all this, our ACL system was something I definitely wanted to open source some day. But given its complexity, and the fact it was deeply coupled to our application, it was impossible. Then came Doctrine 2.4, and then 2.5, and it changed a lot of things. As the next big rewrite (again) was planned, I suggested we tried to make it open source. And that would not mean &ldquo;just publish the code online&rdquo;. That would mean make the effort on making a completely decoupled library with tests and documentation.</p>

<p>It took a few weeks to build it, and the company paid for that effort. But it was greatly rewarded with a solution much more solid and powerful than we ever built.</p>

<p><strong>Thinking and building our code on in a more generic way was definitely beneficial.</strong> We previously had an unstable, half-tested, undocumented, slow and unmaintainable ACL system. We wouldn&rsquo;t dare touch it in fear of breaking everything. We now have a very powerful, tested, fast and documented solution. Yes it took time, but it was definitely worth it.</p>

<p>And I think this library is a perfect example of how <strong>open source was beneficial, even without any external contribution</strong>.</p>

<p>And as a developer, making the library open source turned the <em>most boring problem on earth</em> (permissions!) into a fascinating one! I couldn&rsquo;t stop thinking about it out of work when I was working on it.</p>

<p>My C-Sense is now working on a <a href="https://github.com/myclabs/ACL/pull/9">v2</a>, with a much more simpler configuration and usage (much less boilerplate code). That&rsquo;s so interesting that I&rsquo;ll probably be following the project and maybe helping out if I have the time ;)</p>

<h2>MyCLabs\Work</h2>

<p>The ACL project had been a success, so when we ended up moving away from Gearman and thus rewriting our worker system (coupling, coupling…), I suggested we tried building an open source solution for it. Here&rsquo;s <a href="http://myclabs.github.io/Work/"><strong>MyCLabs\Work</strong></a>.</p>

<p>Of course, I had a look at everything that could fit the bill. But again, we needed a feature that wasn&rsquo;t provided by any open source library I could find:</p>

<blockquote><p>That task is too long, it needs to run in background and the user will be notified by email when it finishes. But sometimes it can be very fast, so receiving an email is useless and looks stupid.</p>

<p>So we want to run the task in background, but if it takes less than 5 seconds, we need to show the result to the user directly (in the web page) as if it didn&rsquo;t run in background. And of course, the worker shouldn&rsquo;t send any email!</p></blockquote>

<p>That looks like a very simple need from a user&rsquo;s point of view. But when you realize that it means you must have a <strong>bidirectional communication</strong> between the web page and the background worker, you start going &ldquo;oh no no no&rdquo;.</p>

<p>Now we just ditched Gearman (because of too many bugs and installation problems), and we didn&rsquo;t want to tie ourselves again to a different work queue. So our library was built against 2 needs:</p>

<ul>
<li>an abstraction over different queue systems (RabbitMQ, Beanstalkd, InMemory…)</li>
<li>an abstraction over the &ldquo;run and wait if it finishes else …&rdquo;</li>
</ul>


<p>Of course, the <code>run and wait</code> wasn&rsquo;t possible on every queue system, so it needed to be something optional. So I ended up writing 2 interfaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">WorkDispatcher</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="nx">SynchronousWorkDispatcher</span> <span class="k">extends</span> <span class="nx">WorkDispatcher</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">runAndWait</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">Task</span> <span class="nv">$task</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$wait</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// time to wait, in seconds</span>
</span><span class='line'>        <span class="nx">callable</span> <span class="nv">$completed</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">callable</span> <span class="nv">$timedout</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">callable</span> <span class="nv">$errored</span> <span class="o">=</span> <span class="k">null</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(the details are documented <a href="http://myclabs.github.io/Work/">here</a>)</p>

<p>For example, the Beanstalkd adapter doesn&rsquo;t implement <code>SynchronousWorkDispatcher</code>, whereas the RabbitMQ adapter does.</p>

<p>Now where it begins to be interesting is that there is no queue system that provides out of the box bidirectional communication with a worker (at least in the one I reviewed at that time, the one with a good PHP lib and the one that can be installed). After several days of thinking and trials, I managed to implement the <code>runAndWait</code> behavior in RabbitMQ with the use of a temp queues and some sort of high level &ldquo;protocol&rdquo;. Maybe not the fastest solution on earth, but for our needs it wasn&rsquo;t a problem at all. If you are curious, you can checkout <a href="https://github.com/myclabs/Work/tree/master/src/Adapter/RabbitMQ">here</a> how it is implemented.</p>

<p>In the end, this is really was this library does: it <strong>abstract</strong> 2 behaviors: simply run a task in background, and run a task and wait for its result.</p>

<p>MyCLabs\Work now has adapters for RabbitMQ, Beanstalkd and &ldquo;In Memory&rdquo; (i.e. for your development machine), you are welcome to push new adapters through pull requests. It&rsquo;s very simple if you don&rsquo;t implement the <code>SynchronousWorkDispatcher</code> interface, for example <a href="https://github.com/myclabs/Work/tree/master/src/Adapter/Beanstalkd">look at the Beanstalkd adapter</a>.</p>

<h2>DeepCopy</h2>

<p><a href="https://github.com/myclabs/DeepCopy"><strong>DeepCopy</strong></a> is a small utility that helps you create deep copies of objects. By deep copy, I mean when you want to duplicate/clone an object <em>and it&rsquo;s sub-objects</em>.</p>

<p>Imagine you need to provide the user a way to &ldquo;duplicate a folder&rdquo;. The user will expect all the files and subfolders to be duplicated too. PHP&rsquo;s <code>clone</code> will do a shallow copy, which means it will only clone the root object, the properties of the cloned object will reference the same objects as the original object.</p>

<p>The &ldquo;built-in&rdquo; PHP solution would be to override <code>__clone()</code>, but that leads to quite complex code, and handling cycling dependencies is very hard.</p>

<p>DeepCopy will handle all that for you. And on top of it, it&rsquo;s completely configurable: you can skip properties, force them to keep their original value, or set them to <code>null</code>. DeepCopy also supports resolving Doctrine&rsquo;s collections and proxies.</p>

<h2>ArrayComparator</h2>

<p><a href="https://github.com/myclabs/ArrayComparator"><strong>ArrayComparator</strong></a> is a bit like DeepCopy: it&rsquo;s a small utility for comparing arrays containing objects. It let&rsquo;s you define callbacks that will be called when items are different or missing between arrays.</p>

<h2>Contributions to other open source projects</h2>

<p>While we use the <a href="https://github.com/myclabs">MyCLabs</a> organization to publish open source libraries, we also use it to host forks of other libraries. That had become quite handy when we proposed a bugfix for Doctrine: let&rsquo;s install our fork instead of the original repo. By the way, <a href="http://mnapoli.fr/overriding-dependencies-with-composer/">here is how to do it with Composer</a>.</p>

<p>So up to now, we contributed mostly to <a href="http://doctrine-project.org">Doctrine</a>, the <a href="https://github.com/Atlantic18/DoctrineExtensions">DoctrineExtensions</a> and <a href="https://github.com/PHPOffice/PHPExcel">PHPExcel</a>.</p>

<h2>A word on documentation</h2>

<p><em>This part is a bit of self-promotion :)</em></p>

<p>We ended up having 2 kinds of projects:</p>

<ul>
<li>small projects where the GitHub project and a single Readme would be enough</li>
<li>larger projects with multi-pages documentation</li>
</ul>


<p>For larger projects, we have been using <a href="http://mnapoli.fr/Couscous/"><strong>Couscous</strong></a> to generate the websites from the Markdown documentation.</p>

<p>It is working pretty well, the local preview is useful and deploying is very simple. And with the newly implemented templates it proved to be even more useful: I have written a <a href="https://github.com/myclabs/couscous-template">Couscous template for MyCLabs projects</a>, and I use it for <a href="http://myclabs.github.io/ACL/">MyCLabs\ACL</a> and MyCLabs\Work.</p>

<p>If you too want to use GitHub Pages to publish a website based on your documentation, give it a try.</p>

<h2>Conclusion</h2>

<p>This was a big list of most of My C-Sense&rsquo;s open source projects. There are even some more that I didn&rsquo;t mention (because the article is getting quite long), so check out <a href="https://github.com/myclabs">MyCLabs page</a>.</p>

<p>To conclude on the open source experience <em>from the company&rsquo;s point of view</em> (and this is my own opinion here), I can only find it beneficial.</p>

<p>Of course, don&rsquo;t expect to get contributions right away and have your software developed for you. Out of all the project we open sourced, we only got a dozen of pull requests. And you have to realize that it takes time to manage them, and the issues (which sometimes are just people asking for help). Remember than an open source project not maintained is hurting the community rather than helping it.</p>

<p>That being said, there are many advantages:</p>

<ul>
<li>an open source library usually mean <strong>better quality</strong>, because that code is public. I would much more restrain from committing a dirty hack if I know the code will be online for years :p But mainly it really help the developer to take a step back and really think about what the library is supposed to do in a more generic way, and also to be more open to other implementations.</li>
<li>a company involved in open source projects looks sexy to developers. <strong>Recruiting</strong> is (I presume) easier, and also it allows to attract and recruit good developers: they know what kind of code and quality level to expect, just like the recruiter does when he browses GitHub profiles of candidates.</li>
<li>open sourced code get fixes and improvements… sometimes. And for free… almost (if you consider the time needed to merge/handle the tickets)</li>
<li><strong>developers do a better work</strong>: publishing an open source project online, or contributing to one, is a great experience. You contribute for something more timeless than your job. The code you write might be used by your peers across the world for year! That&rsquo;s challenging and exciting.</li>
</ul>


<p>The last point is also about the developer&rsquo;s point of view: working on open source projects is an additional source of motivation and involvement. And of course it benefits everyone.</p>

<p>So, companies: <em>as long as you don&rsquo;t make money over it, think about open sourcing it?</em></p>

<p>Now I will finish with a very warm thank you to My C-Sense and its founders for trusting us and letting us try. Open source has had a very positive result up to now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Collection interface and Database abstraction]]></title>
    <link href="http://mnapoli.fr/collection-interface-and-database-abstraction/"/>
    <updated>2014-03-27T18:00:00+13:00</updated>
    <id>http://mnapoli.fr/collection-interface-and-database-abstraction</id>
    <content type="html"><![CDATA[<p>This article logically follows the previous: <a href="http://mnapoli.fr/repository-interface/">The Repository interface</a>. In there I suggested a better interface for repositories based on a Collection interface so that repositories could be manipulated like collections.</p>

<p>This article goes further in that idea and presents an API to abstract database access behind collections of objects.</p>

<p>But first let&rsquo;s start with Doctrine Criterias.</p>

<!-- more -->


<h2>What are Doctrine Criterias?</h2>

<p>When you use Doctrine, you end up interacting with list of objects in two ways:</p>

<ul>
<li>through repositories or the entity manager</li>
<li>through associations</li>
</ul>


<p>At the entity manager or repository level, you can write <strong>DQL queries</strong> (or use the query builder that will generate them for you). This is the most powerful API Doctrine provides to interact with the database.</p>

<p>But inside objects you don&rsquo;t have access to the entity manager or the repository, because the model shouldn&rsquo;t know about the persistence. So what do you do when you want to <strong>filter an association without loading all the objects?</strong> And furthermore: what do you do <strong>if the association is already loaded in memory?</strong> That would be stupid to issue a DB query when you could just filter the objects in memory.</p>

<p>That&rsquo;s where Doctrine introduced the concept of <strong>Criteria</strong>. It&rsquo;s an API that allows you to filter an association with an abstract &ldquo;query&rdquo; (≠ DB query) that you apply to a collection. What&rsquo;s good is:</p>

<ul>
<li>if the collection is already loaded, the filtering happens in memory with PHP</li>
<li>if the collection is not loaded, the filtering is done in a DB query</li>
</ul>


<blockquote><p>The Criteria has a limited matching language that works both on the SQL and on the PHP collection level.
This means you can use collection matching interchangeably, independent of in-memory or sql-backed collections.</p></blockquote>

<p>That&rsquo;s awesome!</p>

<p>Example of how to use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$criteria</span> <span class="o">=</span> <span class="nx">Criteria</span><span class="o">::</span><span class="na">create</span><span class="p">()</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="nx">Criteria</span><span class="o">::</span><span class="na">expr</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;birthday&#39;</span><span class="p">,</span> <span class="s1">&#39;1982-02-17&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">orderBy</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nx">Criteria</span><span class="o">::</span><span class="na">ASC</span><span class="p">))</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">setFirstResult</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">setMaxResults</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$birthdayUsers</span> <span class="o">=</span> <span class="nv">$userCollection</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$criteria</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Criteria API is obviously much more limited than DQL, but <strong>it&rsquo;s completely decoupled from persistence</strong>: you can use it in your model without polluting it with persistence problems, and you can use it against collections, loaded or not.</p>

<p>And the greatest thing of all: Doctrine developers didn&rsquo;t stop here, they also made the Repositories be compatible with those Criterias. Which means the same API whether it&rsquo;s a repository or not. If you read my previous article, you know how much I like that.</p>

<h2>What&rsquo;s wrong then?</h2>

<p>Well something has to be wrong else I wouldn&rsquo;t be writing this, and you wouldn&rsquo;t be wasting your time reading it.</p>

<ul>
<li>you cannot filter on associations of objects inside the collection, i.e. <code>JOIN</code> (which is pretty common)</li>
<li>you cannot perform updates or deletes in bulk without loading the objects first (like set <code>published = true</code> for all articles in this collection or repository)</li>
<li>the API uses persistence words, like &ldquo;where&rdquo;, &ldquo;order by&#8221;… It&rsquo;s not so much a biggy but still, it&rsquo;s not perfect</li>
<li>you cannot chain criterias and have only 1 DB query: 1 Criteria = 1 query</li>
</ul>


<p>The last point is a bit vague so let me show you an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Blog</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPublishedArticles</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$criteria</span> <span class="o">=</span> <span class="nx">Criteria</span><span class="o">::</span><span class="na">create</span><span class="p">()</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="nx">Criteria</span><span class="o">::</span><span class="na">expr</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;published&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">articles</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$criteria</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$articles</span> <span class="o">=</span> <span class="nx">blog</span><span class="o">-&gt;</span><span class="na">getPublishedArticles</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$criteria</span> <span class="o">=</span> <span class="nx">Criteria</span><span class="o">::</span><span class="na">create</span><span class="p">()</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">setFirstResult</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="o">-&gt;</span><span class="na">setMaxResults</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>
</span><span class='line'><span class="nv">$articlesToDisplay</span> <span class="o">=</span> <span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$criteria</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here all the published articles will be loaded in memory, and then the first 20 results will be kept.</p>

<h2>The Collection interface</h2>

<p>Before diving in a better alternative to criterias, let&rsquo;s start back with an awesome Collection interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">Collection</span> <span class="k">extends</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">IteratorAggregate</span><span class="p">,</span> <span class="nx">ArrayAccess</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">contains</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">remove</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">toArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">count</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">Expr</span> <span class="nv">$predicate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">sort</span><span class="p">(</span><span class="nv">$field</span><span class="p">,</span> <span class="nv">$direction</span> <span class="o">=</span> <span class="s1">&#39;ASC&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">slice</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">map</span><span class="p">(</span><span class="nx">Closure</span> <span class="nv">$function</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(let&rsquo;s also assume that the Repository interface also extends that interface :) )</p>

<h2>Filtering!</h2>

<p>This interface looks a lot like the Doctrine Collection interface, except that <code>filter</code> doesn&rsquo;t take a <code>Closure</code> anymore but an &ldquo;expression&rdquo;, which is where the fun begin. Because it&rsquo;s not PHP code but an expression object (like the Criteria expression object), we can apply the same filtering in memory and in database.</p>

<p>Now we are get out of the scope of the interface and have a look at the implementations: <strong>what if <code>filter</code>, <code>sort</code> and <code>slice</code> where lazy?</strong></p>

<p>What I mean is these methods would return a new &ldquo;lazy&rdquo; collection that would only be loaded/computed if used. That allows some pretty nice chaining!</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nx">Expr</span><span class="o">::</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nx">Expr</span><span class="o">::</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="nv">$john</span><span class="p">))</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">sort</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;DESC&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Perform a COUNT() query in database</span>
</span><span class='line'><span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$results</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; results&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fetches only 10 results from the database</span>
</span><span class='line'><span class="nv">$pageResults</span> <span class="o">=</span> <span class="nv">$results</span><span class="o">-&gt;</span><span class="na">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Executes on loaded objects, no DB query here</span>
</span><span class='line'><span class="nv">$allAuthors</span> <span class="o">=</span> <span class="nv">$pageResults</span><span class="o">-&gt;</span><span class="na">map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">Article</span> <span class="nv">$article</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code would only issue 2 queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Count the total number of articles</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">art</span><span class="p">.</span><span class="n">id</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">Article</span> <span class="n">art</span>
</span><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="k">User</span> <span class="k">ON</span> <span class="k">User</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">art</span><span class="p">.</span><span class="n">author_id</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">art</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">art</span><span class="p">.</span><span class="nb">date</span> <span class="k">DESC</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Fetch 10 articles for the current page</span>
</span><span class='line'><span class="k">SELECT</span> <span class="p">...</span> <span class="k">FROM</span> <span class="n">Article</span> <span class="n">art</span>
</span><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="k">User</span> <span class="k">ON</span> <span class="k">User</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">art</span><span class="p">.</span><span class="n">author_id</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">art</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">art</span><span class="p">.</span><span class="nb">date</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What about updating and deleting?</h2>

<p>In the same spirit, you could imagine an API to update or delete items from a collection or repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Delete Bob&#39;s articles</span>
</span><span class='line'><span class="nv">$articles</span> <span class="o">=</span> <span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nx">Expr</span><span class="o">::</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="nv">$bob</span><span class="p">));</span>
</span><span class='line'><span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Publish Alice&#39;s articles</span>
</span><span class='line'><span class="nv">$articles</span> <span class="o">=</span> <span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nx">Expr</span><span class="o">::</span><span class="na">eq</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="nv">$alice</span><span class="p">));</span>
</span><span class='line'><span class="nv">$articles</span><span class="o">-&gt;</span><span class="na">apply</span><span class="p">(</span><span class="nx">Expr</span><span class="o">::</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;published&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the delete and update queries will include the previous filtering, such that there is only 1 query executed for Bob, and 1 for Alice.</p>

<p>Of course, that is if the objects are not loaded in memory. If they are, then the objects are updated.</p>

<h2>Conclusion</h2>

<p>This article was just an idea thrown around for discussion. There is no library available, or repository containing any code.</p>

<p>To sum up all this quickly:</p>

<ul>
<li>a repository is a collection (and much more too)</li>
<li>you can manipulate collections and chain filtering, sorting, etc&hellip; in a very readable way while knowing you don&rsquo;t trigger dozens of DB queries</li>
<li>the API shown here could be a more powerful alternative to Criterias</li>
<li>it can also provide a simpler alternative to DQL/Query Builder with the benefit of being persistence agnostic and usable in entities</li>
<li>it could allow pagination and sorting in the controllers much more easily (you wouldn&rsquo;t need to add these as parameters in your repositories for example)</li>
<li>it would allow for more optimized database access (counting the collection would just issue a COUNT query for example)</li>
</ul>


<h3>Drawbacks</h3>

<p>I can&rsquo;t finish that article without expressing what I consider as the major drawback behind all this:
you are a little tiny bit persistent-aware, because you don&rsquo;t filter your collections with PHP code but with
an arbitrary expression language.</p>

<p>That doesn&rsquo;t mean your code is coupled to the persistence layer though because it also completely works in memory,
but you deliberately don&rsquo;t use PHP code because you <em>know</em> that it&rsquo;s not optimized to load all the objects from the
database and then filter them with PHP.</p>

<p>I would say <strong>that&rsquo;s an acceptable compromise</strong>, because let&rsquo;s be honest, there is no perfect solution.
<strong>You can&rsquo;t apply PHP code to a SQL database</strong> so you have to compromise somewhere…</p>

<h3>Penumbra</h3>

<p>Or can you? ;)</p>

<p>That&rsquo;s the bonus note on which I will finish.
There is another approach (rather controversial) taken by a new project named <strong><a href="https://github.com/TimeToogo/Penumbra">Penumbra</a></strong>.
Instead of playing with &ldquo;expressions&rdquo; to filter collections, it allows to filter using PHP code! It then parses that code
to turn it into SQL code. Pretty audacious, but apparently it works (if you keep it reasonable) :)</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$MiddleAgedUsersRequest</span> <span class="o">=</span> <span class="nv">$UserRepository</span><span class="o">-&gt;</span><span class="na">Request</span><span class="p">()</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">Where</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">User</span> <span class="nv">$User</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$User</span><span class="o">-&gt;</span><span class="na">GetAge</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="o">&amp;&amp;</span> <span class="nv">$User</span><span class="o">-&gt;</span><span class="na">GetAge</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">50</span> <span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="o">-&gt;</span><span class="na">OrderByDescending</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">User</span> <span class="nv">$User</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$User</span><span class="o">-&gt;</span><span class="na">GetLastLoginDate</span><span class="p">();</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$SomeActiveMiddleAgedUsers</span> <span class="o">=</span> <span class="nv">$MiddleAgedUsersRequest</span><span class="o">-&gt;</span><span class="na">AsArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will result in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">Users</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="n">Users</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">Users</span><span class="p">.</span><span class="n">Age</span> <span class="o">&gt;</span> <span class="mi">20</span> <span class="k">AND</span> <span class="n">Users</span><span class="p">.</span><span class="n">Age</span> <span class="o">&lt;</span> <span class="mi">50</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Users</span><span class="p">.</span><span class="n">LastLoginDate</span> <span class="k">DESC</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will not comment on whether this is good or not, because honestly I don&rsquo;t know.
It seems like it&rsquo;s heavily tested and it&rsquo;s a serious project, so it&rsquo;s not just a POC or hack.
I&rsquo;ll let you make your own mind :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Repository interface]]></title>
    <link href="http://mnapoli.fr/repository-interface/"/>
    <updated>2014-03-10T18:00:00+13:00</updated>
    <id>http://mnapoli.fr/repository-interface</id>
    <content type="html"><![CDATA[<p>Here is the definition of a repository for Eric Evans in his
<a href="http://books.google.fr/books/about/Domain_driven_Design.html?id=7dlaMs0SECsC&amp;redir_esc=y">Domain Driven Design</a> book:</p>

<blockquote><p>A <em>repository</em> represents all objects of a certain type as a conceptual set (usually emulated).
<strong>It acts like a collection</strong>, except with more elaborate querying capability.
[&hellip;]
For each type of object that needs global access, <strong>create an object that can provide the illusion
of an in-memory collection</strong> of all objects of that type.</p></blockquote>

<p>While I love Doctrine, I really dislike
<a href="https://github.com/doctrine/common/blob/master/lib/Doctrine/Common/Persistence/ObjectRepository.php">their repository interface</a>
because it doesn&rsquo;t look and act like a collection.
And that&rsquo;s too bad because Doctrine even provides a very good abstraction for collections
through the <code>doctrine/collection</code> project. It even supports filtering with criterias over collections <strong>and</strong> repositories.</p>

<p>I know that Doctrine is not targeted at Domain Driven Design only, but I think having a better repository interface
would still benefit the project and the users.</p>

<p>Here is a basic repository interface I tend to use instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">Repository</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">remove</span><span class="p">(</span><span class="nv">$entity</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">count</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @throws NotFoundException</span>
</span><span class='line'><span class="sd">     * @return object</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">find</span><span class="p">(</span><span class="nx">Criteria</span> <span class="nv">$criteria</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Of course, you should use this interface as a base and write your own repository interfaces for each aggregate root.</p>

<h2>Collection verbs</h2>

<p>Why use verbs like<code>add</code> and <code>remove</code> instead of <code>load</code>, <code>save</code>, <code>delete</code>, <code>persist</code>, …?</p>

<p>Because those are persistence-related terms and have nothing to do in an interface
that is going to be used/extended in the domain layer.</p>

<h2>Get versus Find</h2>

<p>I really dislike that you can only <code>find</code> in Doctrine: it will return null if no entity is found.</p>

<p>Most of the time, that is not what you want. You actually don&rsquo;t want to &ldquo;search and find&rdquo; the entity,
you just want to get it by its id and you assume it exists.</p>

<p>That&rsquo;s why you need to clearly differentiate between find and get:</p>

<ul>
<li>method starting with <code>get</code> should always return an entity, or throw an exception if not found</li>
<li>method starting with <code>find</code> should always return a collection (that could be empty)</li>
</ul>


<h2>Going further: the collection interface</h2>

<p>I&rsquo;ve said it already, but a repository should behave like a collection.
The interface shown above is not completely satisfying yet because it doesn&rsquo;t totally behave like a collection.
For example you can&rsquo;t iterate it.</p>

<p>So the best solution is simple: <strong>write a sensible collection interface and have the repository extend it</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">Collection</span> <span class="k">extends</span> <span class="nx">Countable</span><span class="p">,</span> <span class="nx">IteratorAggregate</span><span class="p">,</span> <span class="nx">ArrayAccess</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">remove</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">contains</span><span class="p">(</span><span class="nv">$element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">find</span><span class="p">(</span><span class="nx">Criteria</span> <span class="nv">$criteria</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">toArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">slice</span><span class="p">(</span><span class="nv">$offset</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">interface</span> <span class="nx">Repository</span> <span class="k">extends</span> <span class="nx">Collection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(this is a very simple version, not exhaustive at all)</p>

<p>Now this is much better.
<strong>You can even type-hint against the collection and accept at the same time collections and repositories!</strong></p>

<p>You can then iterate or filter the collection without having to care what the object really is.
For example, you can write a <code>ProductCriteria</code> and use it both on the repository and collections of products.</p>

<p>Example: let&rsquo;s say you write a controller to display a product list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">ProductListController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var ProductCollection</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$products</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">ProductCollection</span> <span class="nv">$products</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">products</span> <span class="o">=</span> <span class="nv">$products</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">listAction</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">View</span><span class="p">(</span><span class="s1">&#39;product-list.twig.html&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">products</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here your controller is completely reusable. If you give it the <code>ProductRepository</code>, it can display the whole
product list. If you give it the list of favorite products of the user, it will work too.
Thank you dependency injection!</p>

<p>And the day PHP gets generics, that will be even nicer (<code>Collection&lt;Product&gt;</code>) but that&rsquo;s a debate for another day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with mails in dev environment]]></title>
    <link href="http://mnapoli.fr/working-with-mails-in-dev-environment/"/>
    <updated>2013-09-23T16:32:00+12:00</updated>
    <id>http://mnapoli.fr/working-with-mails-in-dev-environment</id>
    <content type="html"><![CDATA[<p>If your application sends emails, you probably don&rsquo;t want emails to be sent when you are developing on your machine.</p>

<p>If you use nice libraries like <a href="http://swiftmailer.org/">SwiftMailer</a>, it is easy to use a mock instead of sending real emails.
But if you don&rsquo;t, you can act on PHP&rsquo;s configuration: instead of installing and using a real SMTP server on your machine, you can fake one using a simple script.</p>

<!--more-->


<p>The fake server will be a shell script: create it as <code>/usr/local/bin/sendmail-fake</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>date
</span><span class='line'><span class="nb">echo</span> <span class="nv">$@</span>
</span><span class='line'>cat
</span><span class='line'><span class="o">}</span> &gt;&gt; /var/log/sendmail-fake.log
</span></code></pre></td></tr></table></div></figure>


<p>Set up file permissions and check that it works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo chmod +x /usr/local/bin/sendmail-fake
</span><span class='line'><span class="nv">$ </span>sudo chmod 777 /var/log/sendmail-fake.log
</span><span class='line'><span class="nv">$ </span>/usr/local/bin/sendmail-fake
</span></code></pre></td></tr></table></div></figure>


<p>Now configure PHP to use it in the <code>php.ini</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">sendmail_path</span> <span class="o">=</span> <span class="s">/usr/local/bin/sendmail-fake</span>
</span></code></pre></td></tr></table></div></figure>


<p>(and restart Apache)</p>

<p><strong>That&rsquo;s it!</strong></p>

<p>You can also see the emails content in <code>/var/log/sendmail-fake.log</code>.</p>

<p>You could even go further and edit the script to open the content of the mail into a text editor, or a browser. But that would be OS dependent, so I kept with the log file here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MetaModel and MetaConsole to debug your application]]></title>
    <link href="http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application/"/>
    <updated>2013-09-13T16:08:00+12:00</updated>
    <id>http://mnapoli.fr/using-metamodel-and-metaconsole-to-debug-your-application</id>
    <content type="html"><![CDATA[<p>I started working a few months ago on <a href="https://github.com/mnapoli/MetaModel">MetaModel</a>, a language that enables to <strong>traverse and operate your PHP model</strong>.</p>

<p>Today I&rsquo;m going to show you how you can use MetaModel through the <a href="https://github.com/mnapoli/MetaConsole">MetaConsole</a> to debug your application.</p>

<p><img src="http://mnapoli.fr/images/posts/metaconsole3.gif"></p>

<!-- more -->


<h2>Setup</h2>

<p>To integrate the MetaConsole to your project, it&rsquo;s very simple using Composer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;require-dev&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;mnapoli/metaconsole&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I create a <code>bin/meta.php</code> file (name it as you like) in my application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">#!/usr/bin/env php</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">MetaModel\Bridge\Doctrine\EntityManagerBridge</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">MetaModel\Bridge\PHPDI\PHPDIBridge</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">MetaModel\MetaModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Here I set up my application (bootstrap)</span>
</span><span class='line'><span class="k">require_once</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/../application/init.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$metaModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MetaModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Integrate with the Doctrine EntityManager</span>
</span><span class='line'><span class="nv">$entityManager</span> <span class="o">=</span> <span class="cm">/* ... */</span><span class="p">;</span>
</span><span class='line'><span class="nv">$metaModel</span><span class="o">-&gt;</span><span class="na">addObjectManager</span><span class="p">(</span><span class="k">new</span> <span class="nx">EntityManagerBridge</span><span class="p">(</span><span class="nv">$entityManager</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Integrate with PHP-DI container</span>
</span><span class='line'><span class="nv">$container</span> <span class="o">=</span> <span class="cm">/* ... */</span><span class="p">;</span>
</span><span class='line'><span class="nv">$metaModel</span><span class="o">-&gt;</span><span class="na">addContainer</span><span class="p">(</span><span class="k">new</span> <span class="nx">PHPDIBridge</span><span class="p">(</span><span class="nv">$container</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$console</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MetaConsole\Application</span><span class="p">(</span><span class="s1">&#39;MetaConsole&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$metaModel</span><span class="p">);</span>
</span><span class='line'><span class="nv">$console</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I can integrate the console with my ORM (<a href="http://www.doctrine-project.org/">Doctrine 2</a> here) and my DI container (<a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>). You can write bridges for other kinds of object managers or containers (and feel free to submit a Pull Request too).</p>

<h2>Using</h2>

<p>Last week, I had a bug in my application, and it was very difficult to debug because it involved data, and that was not the kind of bug you can reproduce and fix using unit tests because it involved a lot of objects. Without MetaConsole, I would have had to dig through the database using phpMyAdmin or MySQL Workbench, writing queries and joining dozens of tables.</p>

<p>Instead, I launched MetaConsole, and I selected an object for which I had an ID (the ID was in the URL of the webpage I wanted to debug):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">AF_Model_InputSet</span><span class="p">(</span><span class="mi">562</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will select the entity <code>AF_Model_InputSet</code> with ID 562, and dump it to the screen. To do this, MetaModel queries Doctrine, which roughly translate to this PHP code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$entityManager</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;AF_Model_InputSet&#39;</span><span class="p">,</span> <span class="mi">562</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that I had my object on screen, I could <strong>traverse the object graph</strong> (through associations, getters, arrays, …) with more precise queries:</p>

<p><img src="http://mnapoli.fr/images/posts/metaconsole1.png"></p>

<p>In the end, I ended up finding my bug: one component was marked as &ldquo;required&rdquo; but had a number of required fields > 0 (not normal!). I fixed the code, and now I needed to rebuild some data to have everything in sync again (after my tests). That&rsquo;s the kind of operation that can&rsquo;t be done just on a single object through the website.</p>

<p>No problem, MetaModel let&rsquo;s you traverse an object graph, but also <strong>call methods on objects and on services:</strong></p>

<p><img src="http://mnapoli.fr/images/posts/metaconsole2.png"></p>

<h2>Conclusion</h2>

<p>MetaModel is pretty much stable, though there are a lot of features I want to add (arguments in method calls, …).</p>

<p>On the other side, MetaConsole is still in development, and I hope to provide better integration with frameworks and a more enjoyable interface. If you are interested, you can try it (it&rsquo;s a development tool, so there&rsquo;s no risk since you shouldn&rsquo;t use it in production), and you can <a href="https://github.com/mnapoli/MetaConsole">improve it</a>.</p>

<p>And also, ideas are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running composer install when you switch branch]]></title>
    <link href="http://mnapoli.fr/run-composer-install-when-you-switch-branch/"/>
    <updated>2013-09-09T17:03:00+12:00</updated>
    <id>http://mnapoli.fr/run-composer-install-when-you-switch-branch</id>
    <content type="html"><![CDATA[<p>When working with <a href="http://getcomposer.org/">Composer</a> and git branches, you will end up either:</p>

<ul>
<li>reinstalling dependencies each time you switch branch</li>
<li>or meeting weird bugs because you didn&rsquo;t</li>
</ul>


<p>because <code>composer.json</code> may have changed between branches.</p>

<p>To have composer automatically re-install dependencies when you switch to a branch, simply create a <code>.git/hooks/post-checkout</code> file in your project repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$GIT_DIR</span>/..
</span><span class='line'>
</span><span class='line'>composer install
</span></code></pre></td></tr></table></div></figure>


<p>This is a git post-checkout hook (as the name suggest)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I herd you like tests]]></title>
    <link href="http://mnapoli.fr/i-herd-you-like-tests/"/>
    <updated>2013-08-22T16:17:00+12:00</updated>
    <id>http://mnapoli.fr/i-herd-you-like-tests</id>
    <content type="html"><![CDATA[<p>So you chose to test your application using unit/functional tests.</p>

<p><strong>How do you ensure your tests do indeed test what you expect?</strong></p>

<p>Fear not! Here comes <strong>TestsTester</strong>!</p>

<!-- more -->


<h2>Use case</h2>

<figure class='code'><figcaption><span>tests/MyTest.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testDate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$entry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entry</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertNotNull</span><span class="p">(</span><span class="nv">$entry</span><span class="o">-&gt;</span><span class="na">getDate</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Woops, I forgot to test that the date is in the past:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertLessThanOrEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">DateTime</span><span class="p">(),</span> <span class="nv">$entry</span><span class="o">-&gt;</span><span class="na">getDate</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now my sofware is filled with bugs!</p>

<h2>Usage</h2>

<p>With <strong>TestsTester</strong>, I would have detected that:</p>

<figure class='code'><figcaption><span>teststests/MyTestTest.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyTestTest</span> <span class="k">extends</span> <span class="nx">TestsTester</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testTestDate</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">(</span><span class="s1">&#39;MyTest&#39;</span><span class="p">,</span> <span class="s1">&#39;testDate&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">checkAssertNotNull</span><span class="p">(</span><span class="s1">&#39;$entry-&gt;getDate()&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$test</span><span class="o">-&gt;</span><span class="na">checkAssertLessThanOrEqual</span><span class="p">(</span><span class="s1">&#39;new DateTime()&#39;</span><span class="p">,</span> <span class="s1">&#39;$entry-&gt;getDate()&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then run the test tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>testtester teststests/
</span></code></pre></td></tr></table></div></figure>


<p>Result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>TestsTester 1.0.0
</span><span class='line'>
</span><span class='line'>F
</span><span class='line'>
</span><span class='line'>There was 1 failure:
</span><span class='line'>
</span><span class='line'>1<span class="o">)</span> MyTestTest::testTestDate
</span><span class='line'><span class="s1">&#39;MyTest::testDate&#39;</span> <span class="k">do </span>not <span class="nb">test </span>that <span class="s1">&#39;$entry-&gt;getDate()&#39;</span> is less than or equal to <span class="s1">&#39;new DateTime()&#39;</span>.
</span><span class='line'>
</span><span class='line'>FAILURES!
</span><span class='line'>Tests: 1, Assertions: 2, Failures: 1.
</span></code></pre></td></tr></table></div></figure>


<p>Give it a try and check out all the crazy features at <a href="http://bit.ly/7JJSz8"><strong>TestsTester.com</strong></a>.</p>

<p><img src="http://mnapoli.fr/images/posts/yo-dawg.jpg" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giving a try to Octopress as a blog engine]]></title>
    <link href="http://mnapoli.fr/giving-a-try-to-octopress-as-a-blog-engine/"/>
    <updated>2013-08-21T16:17:00+12:00</updated>
    <id>http://mnapoli.fr/giving-a-try-to-octopress-as-a-blog-engine</id>
    <content type="html"><![CDATA[<p>This blog was running on Wordpress. And I hated it.</p>

<p>Writing an article was really not funny, especially when I needed to include some code!</p>

<p>In 2013, what&rsquo;s the best way to write down text and code? <strong>Markdown</strong>!</p>

<!-- more -->


<p>So I gave a try to <a href="http://jekyllrb.com/">Jekyll</a> first, and it was quite nice. But then I stumbled upon <a href="http://octopress.org/"><strong>Octopress</strong></a>, and given that is a real blog engine, I switched. I had to rewrite all the previous article into Markdown, and it was fast!</p>

<p>So right now I&rsquo;m loving it. Especially the fact that I can write drafts anywhere using a text editor, that anybody can submit pull requests through Github to fix an article, and that my articles are finally in a standardized reusable format on my hard drive.</p>

<p>It&rsquo;s fair to mention the not funny parts though:</p>

<ul>
<li>You need to install ruby, rvm, and many things. Because of OS X, zsh and stuff, I got stuck and frustrated :(</li>
<li>With Octopress, you need to work on a <code>source</code> branch, not the <code>master</code> branch: there&rsquo;s a <code>rake deploy</code> command to publish to master</li>
<li>It&rsquo;s not that easy to work with themes, plugins, …</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friend services?]]></title>
    <link href="http://mnapoli.fr/friend-services/"/>
    <updated>2013-08-09T17:03:00+12:00</updated>
    <id>http://mnapoli.fr/friend-services</id>
    <content type="html"><![CDATA[<p>Using the Domain Driven Design methodology, I sometimes end up on such a situation: a behavior in a model class is complex and involving other classes. It’s time to put that behavior in a service (or a factory if the situation applies to a constructor).</p>

<p>The problem is that in my service, I am not in the context of the domain class. If I move <code>Foo::something()</code> into <code>FooService::something($foo)</code>, then <strong>I can’t access private properties of Foo</strong>, thus limiting me to the public API of Foo.</p>

<p>Now I end up adding accessors, thus breaking encapsulation and complexifying everything where all I wanted was improving the code.</p>

<p>VB.Net has a concept of “Friend” visibility, i.e. if A is friend with B, then A can access private properties of B (or something like that it’s been a long time :p). PHP doesn’t have such a concept natively, but here is a tryout to apply it with workarounds.</p>

<!-- more -->


<p><em>Disclaimer</em>: the code is not pretty and is not for production. This is just an idea thrown around.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$bar</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FriendOfFoo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">function</span><span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$foo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FriendOfFoo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$closure</span> <span class="o">=</span> <span class="nv">$service</span><span class="o">-&gt;</span><span class="na">doSomething</span><span class="p">(</span><span class="nv">$foo</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bindTo</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="nv">$foo</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$closure</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>See it in action on <a href="http://3v4l.org/e9RNO">3v4l.org</a>.</p>

<p>Here, FriendOfFoo is a service that has access to Foo’s private and protected properties.</p>

<p>We achieve that by writing the methods of the service into closures. We can then <a href="http://php.net/manual/en/closure.bindto.php">bind those closures to the context of Foo</a>, and voilà!</p>

<p>If you see a better way of achieving this, I am interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controllers as services?]]></title>
    <link href="http://mnapoli.fr/controllers-as-services/"/>
    <updated>2013-07-01T20:00:00+12:00</updated>
    <id>http://mnapoli.fr/controllers-as-services</id>
    <content type="html"><![CDATA[<p>This post is sort-of a response to the <a href="http://www.whitewashing.de/2013/06/27/extending_symfony2__controller_utilities.html">blog post of Benjamin Eberlei about Controllers in Symfony 2</a>.</p>

<p>The subject is about Controllers and their dependencies:</p>

<blockquote><p>Controllers as a service are a heated topic in the Symfony world. Developers mainly choose to extend the base class, because its much simpler to use and less to write.</p></blockquote>

<p>With Symfony 2, you can write controllers 2 ways:</p>

<ol>
<li><p>extend the base Controller class. This is simpler and more practical but it ties up your controller to Symfony. Also, to fetch dependencies, you have to get them from the container, which is known as the <strong>Service Locator anti-pattern</strong> (= bad).</p></li>
<li><p>create a “normal” class, and use it as a service. That means you can use dependency injection through the constructor to get your dependencies. This is clean, this looks good, but you end up with managing a lot of dependencies :/</p></li>
</ol>


<p>To ease up solution n°2, Benjamin proposes to create a “ControllerUtility” class which would group the most used controller services. That way, you dramatically reduce the dependencies, and still hide the container.</p>

<p>I use a different solution.</p>

<!-- more -->


<h2>Constructor injection is not the only possible injection</h2>

<p>The idea is to keep the solution n°2, but use <strong>Property Injection</strong> instead of Constructor Injection.</p>

<p>Property injection is generally frowned upon, and for good reasons:</p>

<ul>
<li>injecting in a private property breaks encapsulation</li>
<li>it is not an explicit dependency: there is no contract saying your class need the property to be set to work</li>
<li>if you use annotations to mark the dependency to be injected, your class is dependent on the container</li>
</ul>


<p><strong>BUT</strong></p>

<p>if you follow best practices, <strong>your controllers will not contain business logic</strong> (only routing calls to the models and binding returned values to view).</p>

<p>So:</p>

<ul>
<li>you will not unit-test it (that doesn’t mean you won’t write functional tests on the interface though)</li>
<li>you may not need to reuse it elsewhere</li>
<li>if you change the framework, you may have to rewrite it (or parts of it) anyway (because most dependencies like Request, Response, etc. will have changed)</li>
</ul>


<p>Because of that, I chose to use Property injection.</p>

<h2>Property injection</h2>

<p>Here is what my controllers look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">DI\Annotation\Inject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Inject</span>
</span><span class='line'><span class="sd">     * @var RouterInterface</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$router</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Inject</span>
</span><span class='line'><span class="sd">     * @var FormFactoryInterface </span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$formFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">createForm</span><span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$data</span><span class="p">,</span> <span class="nv">$options</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// $this-&gt;formFactory-&gt;...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note this is an example using <a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>, my alternative DI Container. It allows to mark injections using annotations.</p>

<p>I know many PHP devs don’t like annotations, and there are some reasons not to use it. But in this case, because of the points I explained above, I find it acceptable to use the <code>@Inject</code> annotation. I find it also extremely practical.</p>

<p>Of course, this example also applies without using annotations (using a configuration file f.e.), and <strong>it also applies to Symfony’s container</strong>.</p>

<p>In the end:</p>

<ul>
<li>controllers don’t use the container</li>
<li>controllers can be reused elsewhere, given they are fetched through the container</li>
<li>we have full auto-completion and refactoring support in IDEs</li>
<li><strong>controllers are easy and fast to write and read</strong> (and that’s something I value a lot)</li>
</ul>


<p>By the way, some Java developers may find this pattern of code familiar, it’s inspired from when I was working with Spring :)</p>

<h2>Performance note</h2>

<blockquote><p>You are injecting services that may not be used</p></blockquote>

<p><a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a> and <a href="http://symfony.com/doc/current/components/dependency_injection/index.html">Symfony DIC</a> both support lazy injection, i.e. injecting a proxy that will load the target service only when it is used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should you really write ugly code? Spoiler: no]]></title>
    <link href="http://mnapoli.fr/should-you-really-write-ugly-code-no/"/>
    <updated>2013-06-09T20:00:00+12:00</updated>
    <id>http://mnapoli.fr/should-you-really-write-ugly-code-no</id>
    <content type="html"><![CDATA[<p>I recently stumbled upon François Zaninotto’s blog post: <a href="http://redotheweb.com/2013/06/04/you-should-write-ugly-code.html">You should write ugly code</a>. While he makes several good points, I strongly disagree with him and I feel the urge to give my opinion on the matter (what did you expect, this is a blog).</p>

<p>The point that he makes is that he encourages developers to write “ugly code”, i.e. code that works and that doesn’t follow best practices or anything related to code quality.</p>

<blockquote><p>[..] developers shouldn’t care about code beauty, because that’s not their job. Instead, they should focus on creating great products, which is infinitely more satisfying.</p></blockquote>

<p>Later, he insists that by writing ugly code, we ship faster than if we had to worry and handle code quality. And shipping faster is good for the business.</p>

<p>Well that’s true. That’s called <strong>Technical Debt</strong>. And like any debt, you’ll have to repay later.</p>

<p><img src="http://mnapoli.fr/images/posts/technical-debt.png" width="400"></p>

<!-- more -->


<p><em>Technical debt diagram, borrowed from Planet Geek for the (awesome) “<a href="http://www.planetgeek.ch/2013/06/05/clean-code-cheat-sheet/">Clean Code cheat sheet</a>“.</em></p>

<p>Payback is a bitch and future-you will be cursing present-you for writing ugly code. The cost of change is directly affected, and when you tell your boss that Feature B will takes 2 weeks, he will point out that Feature A took only 2 days.</p>

<p>I won’t get radical as well and say that you should alway write “beautiful code”. What I advocate for is to carefully choose your side.</p>

<p>You need to get a prototype working for a demo? Then get it done quick and dirty! Heck I even used <a href="http://php.net/manual/fr/function.mysql-query.php">mysql_query</a> on an internal website once, and it worked. I know that this website will never need any real maintenance, so I can sleep without fearing for <a href="http://www.codinghorror.com/blog/2008/06/coding-for-violent-psychopaths.html">violent psychopaths</a>.</p>

<p>But if you plan on writing software that will be maintained for a few years, you would definitely earn by writing beautiful code. Code quality earns you money, and that’s something difficult for managers to get (especially if they have never developed, or never seen code quality benefits before). I once took part on the rewrite of a whole application. After the rewrite, the manager was completely amazed that we needed only a few days to do what would systematically take a month or two before.</p>

<p>I’d like to finish on his take about “<em>coding trends</em>” and what he calls “<em>trend setters</em>” like Eric Evans with his <a href="http://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>. DDD is not a trend, it is a set of patterns and methods to help you in specific situations. <a href="http://www.amazon.com/dp/0321125215/ref=cm_sw_su_dp">Evans book</a> is very clear about it: DDD can be unhelpful if you try to use it everywhere. That is very reductive to say that all these kind of people (Evans, Martin Fowler, Jeff Atwood) do is “<em>to explain why pattern A is better than pattern B. Until someone else publishes a book, explaining that pattern C is much, much better.</em>”</p>

<p>Thanks to these guys, and best practices in general, I make my company earn money with apps that don’t need to be rewritten every year. I can work on my colleague’s code without pulling my hair and wishing him a painful death. I can participate to Open Source projects because I can understand the code.</p>

<p><strong>TL;DR</strong></p>

<ul>
<li>Go quick and dirty, but expect troubles on the long run</li>
<li>Care about quality, that will slow you down but get you farther</li>
</ul>


<p>Both are valid options, but choose carefully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code coverage reports with GitHub, Travis and Coveralls]]></title>
    <link href="http://mnapoli.fr/code-coverage-reports-with-github-travis-and/"/>
    <updated>2013-06-08T20:00:00+12:00</updated>
    <id>http://mnapoli.fr/code-coverage-reports-with-github-travis-and</id>
    <content type="html"><![CDATA[<p>You have a PHP project hosted on GitHub with continuous integration using Travis-CI?</p>

<p>How about setting up <strong>code coverage reports</strong>?</p>

<p>For example, here is the code coverage report of <a href="http://mnapoli.github.io/PHP-DI/">PHP-DI</a>: <a href="https://coveralls.io/r/mnapoli/PHP-DI?branch=master"><img src="https://coveralls.io/repos/mnapoli/PHP-DI/badge.png?branch=master" alt="Coverage Status" /></a> (click on the link to see the details).</p>

<!-- more -->


<p>To do so, you will need to create an account and enable your project at <a href="https://coveralls.io/">Coveralls</a>. Then add this to your <code>composer.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;require-dev&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;satooshi/php-coveralls&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, update your <code>.travis.yml</code> configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">php</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">php</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.3</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.4</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">5.5</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">wget http://getcomposer.org/composer.phar</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">php composer.phar install --dev --no-interaction</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir -p build/logs</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">phpunit --coverage-clover build/logs/clover.xml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">after_script</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">php vendor/bin/coveralls -v</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you commit and push, Travis will run the tests and push the code coverage results to Coverall. Check out your project page on Coverall!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overriding dependencies with Composer]]></title>
    <link href="http://mnapoli.fr/overriding-dependencies-with-composer/"/>
    <updated>2013-04-16T20:00:00+12:00</updated>
    <id>http://mnapoli.fr/overriding-dependencies-with-composer</id>
    <content type="html"><![CDATA[<p>At my company, <strong>My C-Sense</strong>, we use Doctrine amongst other PHP frameworks and libraries. When we find bugs (or need new features), we contribute to the project through our <a href="https://github.com/myclabs">open source initiative</a>.</p>

<p>The problem is when we submit a pull request on Github, several months usually happen until our fix appears in a stable release.</p>

<p>To be able to enjoy our bugfixes immediately, here is our workflow:</p>

<ul>
<li>We fork the repository of the project to <a href="https://github.com/myclabs">our organization account</a></li>
<li>We commit and publish the bugfix in a branch of our repository</li>
<li>We submit a Pull Request</li>
<li>We override the dependency to the project with our version in Composer</li>
</ul>


<p>Overriding a dependency <a href="http://getcomposer.org/doc/04-schema.md#repositories">is quite simple</a>: just add your git repository in your <code>composer.json</code> and require you branch.</p>

<p>But when we want to override, for example, <code>doctrine/common</code> which is used by <code>doctrine/orm</code>, then we have a problem: <code>doctrine/orm</code> wants a stable version of <code>doctrine/common</code>, it will conflict with your requirement to a dev branch.</p>

<p>The solution is to <strong>alias your dev branch to a stable release</strong>, and that is possible through the awesome “<a href="http://getcomposer.org/doc/articles/aliases.md#require-inline-alias">inline alias</a>” functionality in Composer.</p>

<!-- more -->


<p>Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;doctrine/orm&quot;</span><span class="p">:</span> <span class="s2">&quot;2.3.*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;doctrine/common&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-ChainDriverFix as 2.3.0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;repositories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/myclabs/common.git&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, our branch <code>ChainDriverFix</code> will override the 2.3.0 version of <code>doctrine/common</code>, which will also be compatible with <code>doctrine/orm</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming jokes of the week end]]></title>
    <link href="http://mnapoli.fr/programming-jokes-of-the-week-end/"/>
    <updated>2013-04-01T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/programming-jokes-of-the-week-end</id>
    <content type="html"><![CDATA[<p>Every developer knows this joke:</p>

<blockquote><p>Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.</p></blockquote>

<p>I can’t help but share the great serie that I read on twitter tonight:</p>

<!-- more -->




<div class='embed tweet'><blockquote class="twitter-tweet"><p>A programmer had a problem. He thought to himself, &quot;I know, I&#39;ll solve it with threads!&quot;. has Now problems. two he</p>&mdash; Davidlohr Bueso (@davidlohr) <a href="https://twitter.com/davidlohr/statuses/288786300067270656">January 8, 2013</a></blockquote>
<script async src="http://mnapoli.fr//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/davidlohr">@davidlohr</a> <a href="https://twitter.com/stramit">@stramit</a> &quot;I know! I&#39;ll add some locks!&quot; Now he ha</p>&mdash; Aras Pranckevičius (@aras_p) <a href="https://twitter.com/aras_p/statuses/289026199852830720">January 9, 2013</a></blockquote>
<script async src="http://mnapoli.fr//platform.twitter.com/widgets.js" charset="utf-8"></script></div>




<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/davidlohr">@davidlohr</a> <a href="https://twitter.com/TheZotmeister">@TheZotmeister</a> and dear lord if he was handling udp packets. Then. And dear lord if he was handling udp packets. Then he would ha</p>&mdash; Juuso (@gameproducer) <a href="https://twitter.com/gameproducer/statuses/289081742248251394">January 9, 2013</a></blockquote>
<script async src="http://mnapoli.fr//platform.twitter.com/widgets.js" charset="utf-8"></script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The “Optional Singleton” pattern]]></title>
    <link href="http://mnapoli.fr/the-optional-singleton-pattern/"/>
    <updated>2013-03-22T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/the-optional-singleton-pattern</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> is a practical design pattern, that’s the reason it is so popular amongst beginners. It is also an anti-pattern because of the problems it introduces (global state, difficult to test, …).</p>

<p>While I agree with that, and the fact that Singletons should be used with (a lot of) moderation, I also like an alternative pattern which comes with the advantage of the singleton and balances out its disadvantages. This can be useful if you have to work on a codebase that has singletons.</p>

<p>I’m calling this pattern the <strong>Optional Singleton</strong> for lack of a better name.</p>

<p>Simply put, this is a class which you can use as a singleton, or not (it’s optional ;):</p>

<ul>
<li>you can still use the handy <code>MySingleton::getInstance()</code></li>
<li>you can however create new instances of the class, for example for tests</li>
</ul>


<!-- more -->


<p>There is nothing revolutionary about it, see for yourself:</p>

<div><script src='https://gist.github.com/5221664.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>Of course, this is a pattern that has to be used where it makes sense. Singletons, as cool as they can be, will never do better than dependency injection.</p>

<hr />

<p><strong>Update</strong>: I’ve received numerous responses (mostly “the singleton is an anti-pattern” which I agree to). Here is one of my response that I’d like to have here as well:</p>

<blockquote><p>The entire point of the singleton pattern is that you <strong>can’t</strong> instantiate the class. That’s why the pattern is called singleton.</p></blockquote>

<p>My answer:</p>

<blockquote><p>Yes, but in 90% of its derived usage it’s not because we want only one instance, it’s because it’s practical.</p>

<p>Quote from wikipedia: “There is criticism of the use of the singleton pattern, as some consider it an anti-pattern, judging that it is overused, <strong>introduces unnecessary restrictions in situations where a sole instance of a class is not actually required</strong>, and introduces global state into an application.”</p>

<p>For example one may use the singleton pattern for services: accessing them is practical, you can access them anywhere with the singleton pattern. I’ve seen codebases with this pattern.</p>

<p>Now if I come on a codebase using the singleton for services, and if I can’t rewrite everything, I’ll turn the Singletons into “Optional Singletons” so that the existing code still work, and so that I can use Dependency Injection over those services in the new code that I’ll write.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery plugin: Confirm dialogs for HTML links and buttons]]></title>
    <link href="http://mnapoli.fr/confirm-dialogs-for-html-links-and-buttons/"/>
    <updated>2013-03-05T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/confirm-dialogs-for-html-links-and-buttons</id>
    <content type="html"><![CDATA[<p>This is the first open source project created at my company, so I am quite proud of it even though it is not much.</p>

<p>The name is <a href="http://myclabs.github.io/jquery.confirm/"><strong>jquery.confirm</strong></a>, which is pretty explicit. It lets you have confirmation dialogs for links or buttons. For example, <strong>&ldquo;Are you sure you want to delete that comment?&rdquo;</strong> kind of things.</p>

<p>I am going to present its basic usage and options here.</p>

<p>The idea is to write <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">unobtrusive Javascript</a> by letting the user write clean HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;home&quot;</span> <span class="na">class=</span><span class="s">&quot;confirm&quot;</span><span class="nt">&gt;</span>Go to home<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To enable confirmation on this link, simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.confirm&quot;</span><span class="p">).</span><span class="nx">confirm</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>That will show a confirmation dialog each time the user clicks the link. If the user confirms, the plugin will then redirect him to the link.</p>

<p>You can configure the texts and labels through the options. You can also change the actions that are executed when the user confirms (follow the link) or cancels (do nothing), so you can perform AJAX requests for example.</p>

<p>One interesting option is to force the link to be called with a POST request instead of a GET:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.confirm&quot;</span><span class="p">).</span><span class="nx">confirm</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">post</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>On your server-side code, you can check that the request is POST and refuse GET request. That can help prevent security issues like someone sending a link to delete someone else’s account for example: <a href="http://example.com/my-account/delete.">http://example.com/my-account/delete.</a> If you only accept POST request, people clicking on that link won’t see their account deleted (because the request would be a GET).</p>

<p>If you want to learn more or try it, the website contains the <a href="http://myclabs.github.io/jquery.confirm/">official documentation and some demos</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be a better programmer: take a step back]]></title>
    <link href="http://mnapoli.fr/be-a-better-programmer-take-a-step-back/"/>
    <updated>2013-02-04T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/be-a-better-programmer-take-a-step-back</id>
    <content type="html"><![CDATA[<p><em>Replace [client] by [boss] or anything of the kind if you prefer.</em></p>

<h2>A day at work</h2>

<blockquote><p><strong>Bug #3890 from Client</strong></p>

<p>There is an application crash, it says “division by zero error in SpeedCalculator::compute()”.</p>

<p>Please fix ASAP!</p></blockquote>

<!-- more -->


<p>You open <code>SpeedCalculator.php</code> to find:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">compute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">distance</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">time</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixing the bug</h2>

<p>Easy! Who wrote that code anyway, how could he not think of that!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">compute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">time</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">distance</span> <span class="o">/</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">time</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There you go, the bug is fixed in 2 minutes.</p>

<p>Later, the same bug is found in <code>RatioCalculator</code> and <code>MoneyCalculator</code>, but once these are fixed too, everyone in the team is sure the problem won’t appear anywhere, it’s gone, for sure this time! The code is rock solid now!</p>

<p>A month later, another bug pops in. The application does not crash anymore, but the client happens to see wrong calculation results in his reports because of the <code>return 0;</code>.</p>

<h2>Take a step back</h2>

<p>What if, instead of rushing, we took a step back.</p>

<blockquote><p>Why did this situation happen?</p>

<p><code>$this-&gt;time</code> was set to 0.</p></blockquote>

<p>Easy! Let’s prevent that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setTime</span><span class="p">(</span><span class="nv">$time</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$time</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">InvalidArgumentException</span><span class="p">(</span><span class="s2">&quot;Invalid value&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">time</span> <span class="o">=</span> <span class="nv">$time</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this is better, you guarantee the integrity of the data. But the client is not very happy! When he fills the form with a time of 0, the application shows an error page.</p>

<p>So you work on displaying a nice error message by catching the exception in the controller.</p>

<p>When you’re done, you realize you also got the same thing to do for RatioCalculator and MoneyCalculator, so you copy paste and you are good to go.</p>

<p>Wait a minute, the client prefers that the error message is displayed in orange rather than red. So you change the color and copy-paste the code again.</p>

<h2>Take another step back</h2>

<p><strong>What if, instead of fixing a bug, you answered a need?</strong></p>

<p>Why did the client put 0 in the form? Because he made a mistake.</p>

<p>What is needed here?</p>

<ul>
<li>Is it <strong>only</strong> making sure the time that the user inputs in “speedCalculationForm” is ≠ 0?</li>
<li>Is it <strong>only</strong> making sure the “speedCalculationForm” contains valid data?</li>
<li><strong>Or is it validating all user inputs?</strong></li>
</ul>


<p>So what about a validation library for example?</p>

<p>Waaaaait! Don’t go and write one yourself! For the love of god, take a step back, breathe, and look at what already exists.</p>

<h2>Needs</h2>

<p>We, programmers, love being technical. When your client or your boss thinks out loud about what he wants, we can’t help but imagine how we could implement it.</p>

<p>But we need be able to take a step back. If we want to be really good in our jobs, <strong>we have to understand the needs before thinking about solutions</strong>. And that takes a lot of effort.</p>

<p>Does the client really need “a blinking button that moves away when you try to click on it?” or does he need something else, something that he doesn’t know about and that you could help him define? And the same goes for yourself! Do you really need to open a file and write some infos in there, or do you simply need a logging system?</p>

<p>Take a step back, try and see the big picture. Because one may be a very good programmer, but code’s purpose is to answer a need.</p>

<p>Not a <em>&ldquo;fix the bugs in the bug tracker&rdquo;</em> kind of need, but rather a <em>&ldquo;I want an application will help me calculate speed based on input data, and if I type in invalid data then for fuck’s sake just tell me don’t go and calculate some weird results&rdquo;</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doctrine schema validation in a PHPUnit test]]></title>
    <link href="http://mnapoli.fr/doctrine-schema-validation-in-a-phpunit-test/"/>
    <updated>2012-12-10T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/doctrine-schema-validation-in-a-phpunit-test</id>
    <content type="html"><![CDATA[<p>Doctrine offers a <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/tools.html#runtime-vs-development-mapping-validation">command line option to validate the schema</a> (or mapping):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./doctrine orm:validate-schema</span></code></pre></td></tr></table></div></figure>


<p>This is very useful, when I ran it against my code, which was <em>working</em> by the way, I got several errors/warnings.</p>

<p>However, I didn’t want to have to run this tool manually once in a while. I already have tests for that. So I thought: <strong>why not integrating the schema validation to the tests!</strong></p>

<!-- more -->


<p>So here is my implementation of a PHPUnit test failing when Doctrine validation find errors:</p>

<div><script src='https://gist.github.com/4249675.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Dependency Injection with a real life example]]></title>
    <link href="http://mnapoli.fr/introduction-dependency-injection-with-real-life-example/"/>
    <updated>2012-12-06T20:00:00+13:00</updated>
    <id>http://mnapoli.fr/introduction-dependency-injection-with-real-life-example</id>
    <content type="html"><![CDATA[<p>This example is an introduction to the <strong>Dependency Injection</strong> concept. It is based on the PHP library <a href="http://mnapoli.github.com/PHP-DI/">PHP-DI</a>.</p>

<h2>Classic implementation</h2>

<p>Given you have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">GoogleMapsService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// calls Google Maps webservice</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OpenStreetMapService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// calls OpenStreetMap webservice</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The classic way of doing things is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">StoreService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getStoreCoordinates</span><span class="p">(</span><span class="nv">$store</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$geolocationService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GoogleMapsService</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// or $geolocationService = GoogleMapsService::getInstance() if you use singletons</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$geolocationService</span><span class="o">-&gt;</span><span class="na">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$store</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we want to use the OpenStreetMapService instead of GoogleMapsService, how do we do? We have to change the code of StoreService, and all the other classes that use GoogleMapsService.</p>

<p><strong>Without dependency injection, your classes are tightly coupled with their dependencies.</strong></p>

<!-- more -->


<h2>Dependency injection implementation</h2>

<p>The StoreService now uses dependency injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">StoreService</span> <span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Inject</span>
</span><span class='line'><span class="sd">     * @var GeolocationService</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$geolocationService</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getStoreCoordinates</span><span class="p">(</span><span class="nv">$store</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">geolocationService</span><span class="o">-&gt;</span><span class="na">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$store</span><span class="o">-&gt;</span><span class="na">getAddress</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the services are defined using an interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$address</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GoogleMapsService</span> <span class="k">implements</span> <span class="nx">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// calls Google Maps webservice</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OpenStreetMapService</span> <span class="k">implements</span> <span class="nx">GeolocationService</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoordinatesFromAddress</span><span class="p">(</span><span class="nv">$address</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// calls OpenStreetMap webservice</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you use <a href="http://mnapoli.github.com/PHP-DI/">PHP-DI</a> (a PHP dependency injection library), you then configure which implementation will be used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;GeolocationService&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">bindTo</span><span class="p">(</span><span class="s1">&#39;OpenStreetMapService&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you change your mind, there’s just one line of configuration to change.</p>
]]></content>
  </entry>
  
</feed>
